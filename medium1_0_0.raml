#%RAML 1.0
title: Medium.com - Unofficial API Spec
version: 1.0.0
baseUri: api.medium.com/v1
description: |
  Mediumâs unofficial API documentation using OpenAPI specification.

  # Official API
  Official API document can also be viewed for most up to date API spec at [https://github.com/Medium/medium-api-docs](https://github.com/Medium/medium-api-docs).

  Developer Blog - [Welcome to the Medium API](https://medium.com/blog/welcome-to-the-medium-api-3418f956552)
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
securitySchemes:
  OauthSecurity:
    type: OAuth 2.0
    description: First you must register an application on Medium. Then we will supply you a clientId and a clientSecret with which you may access Mediumâs API. Each integration should have its own clientId and clientSecret. The clientSecret should be treated like a password and stored securely.
    settings:
      authorizationGrants:
      - authorization_code
      authorizationUri: https://medium.com/m/oauth/authorize
      accessTokenUri: https://medium.com/v1/tokens
      scopes:
      - basicProfile
      - listPublications
      - publishPost
      - uploadImage
  BearerToken:
    type: Pass Through
types:
  Contibutor:
    type: object
    properties:
      publicationId?:
        type: string
        description: An ID for the publication. This can be lifted from response of publications above
      role?:
        type: string
        description: Role of the user identified by userId in the publication identified by `publicationId`. *editor* or *writer*
      userId?:
        type: string
        description: A user ID of the contributor.
    description: Contibutor
    displayName: Contributor
  ContibutorResponse:
    type: object
    properties:
      data?:
        type: array
        items:
          type: Contibutor
    description: list of contributors for a given publication
    example:
      data:
      - publicationId: b45573563f5a
        role: editor
        userId: 13a06af8f81849c64dafbce822cbafbfab7ed7cecf82135bca946807ea351290d
      - publicationId: b45573563f5a
        role: editor
        userId: 1c9c63b15b874d3e354340b7d7458d55e1dda0f6470074df1cc99608a372866ac
      - publicationId: b45573563f5a
        role: editor
        userId: 1cc07499453463518b77d31650c0b53609dc973ad8ebd33690c7be9236e9384ad
      - publicationId: b45573563f5a
        role: writer
        userId: 196f70942410555f4b3030debc4f199a0d5a0309a7b9df96c57b8ec6e4b5f11d7
      - publicationId: b45573563f5a
        role: writer
        userId: 14d4a581f21ff537d245461b8ff2ae9b271b57d9554e25d863e3df6ef03ddd480
    displayName: Contributors list for a publication
  Post:
    type: object
    properties:
      canonicalUrl?:
        type: string
        description: The original home of this content, if it was originally published elsewhere.
      content:
        type: string
        description: The body of the post, in a valid, semantic, HTML fragment, or Markdown. Further markups may be supported in the future. For a full list of accepted HTML tags, see here. If you want your title to appear on the post page, you must also include it as part of the post content.
      contentFormat:
        type: string
        description: The format of the "content" field. There are two valid values, "html", and "markdown"
      license?:
        type: string
        description: The license of the post. Valid values are `all-rights-reserved`, `cc-40-by`, `cc-40-by-sa`, `cc-40-by-nd`, `cc-40-by-nc`, `cc-40-by-nc-nd`, `cc-40-by-nc-sa`, `cc-40-zero`, `public-domain`. The default is `all-rights-reserved`.
        enum:
        - all-rights-reserved
        - cc-40-by
        - cc-40-by-sa
        - cc-40-by-nd
        - cc-40-by-nc
        - cc-40-by-nc-nd
        - cc-40-by-nc-sa
        - cc-40-zero
        - public-domain
      publishStatus?:
        type: string
        description: The status of the post. Valid values are `public`, `draft`, or `unlisted`. The default is `public`.
        enum:
        - public
        - draft
        - unlisted
      tags?:
        type: array
        description: Tags to classify the post. Only the first three will be used. Tags longer than 25 characters will be ignored.
        items:
          type: string
      title:
        type: string
        description: The title of the post. Note that this title is used for SEO and when rendering the post as a listing, but will not appear in the actual postâfor that, the title must be specified in the content field as well. Titles longer than 100 characters will be ignored. In that case, a title will be synthesized from the first content in the post when it is published.
    example:
      canonicalUrl: http://jamietalbot.com/posts/liverpool-fc
      content: <h1>Liverpool FC</h1><p>Youâll never walk alone.</p>
      contentFormat: html
      publishStatus: public
      tags:
      - football
      - sport
      - Liverpool
      title: Liverpool FC
    displayName: Post
    description: Creates a post for user.
  PostDetails:
    type: object
    properties:
      authorId?:
        type: string
        description: The userId of the postâs author
      canonicalUrl?:
        type: string
        description: The canonical URL of the post. If canonicalUrl was not specified in the creation of the post, this field will not be present.
      id?:
        type: string
        description: A unique identifier for the post.
      license?:
        type: string
        description: The license of the post.
        enum:
        - all-rights-reserved
        - cc-40-by
        - cc-40-by-sa
        - cc-40-by-nd
        - cc-40-by-nc
        - cc-40-by-nc-nd
        - cc-40-by-nc-sa
        - cc-40-zero
        - public-domain
      licenseUrl?:
        type: string
        description: The URL to the license of the post.
      publishStatus?:
        type: string
        description: The publish status of the post.
      publishedAt?:
        type: datetime
        description: The postâs published date. If created as a draft, this field will not be present.
      tags?:
        type: array
        description: The postâs tags
        items:
          type: string
      title?:
        type: string
        description: The postâs title
      url?:
        type: string
        description: The URL of the post on Medium
    description: Details of Post
    example:
      data:
        authorId: 5303d74c64f66366f00cb9b2a94f3251bf5
        canonicalUrl: http://jamietalbot.com/posts/liverpool-fc
        id: e6f36a
        license: all-rights-reserved
        licenseUrl: https://medium.com/policy/9db0094a1e0f
        publishStatus: public
        publishedAt: 1442286338435
        tags:
        - football
        - sport
        - Liverpool
        title: Liverpool FC
        url: https://medium.com/@majelbstoat/liverpool-fc-e6f36a
    displayName: Post Details
  Publication:
    type: object
    properties:
      description?:
        type: string
        description: Short description of the publication
      id?:
        type: string
        description: A unique identifier for the publication.
      imageUrl?:
        type: string
        description: The URL to the publicationâs image/logo
      name?:
        type: string
        description: The publicationâs name on Medium.
      url?:
        type: string
        description: The URL to the publicationâs homepage
    description: Publications provide a way for authors to work collaboratively within a common narrative framework, brand or point of view.
    example:
      description: What is this thing and how does it work?
      id: b969ac62a46b
      imageUrl: https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg
      name: About Medium
      url: https://medium.com/about
    displayName: Publication Info
  PublicationResponse:
    type: object
    properties:
      data?:
        type: array
        items:
          type: Publication
    description: Container object for publication list.
    example:
      data:
      - description: What is this thing and how does it work?
        id: b969ac62a46b
        imageUrl: https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg
        name: About Medium
        url: https://medium.com/about
      - description: Mediumâs Developer resources
        id: b45573563f5a
        imageUrl: https://cdn-images-1.medium.com/fit/c/200/200/1*ccokMT4VXmDDO1EoQQHkzg@2x.png
        name: Developers
        url: https://medium.com/developers
    displayName: Publication List Container
  User:
    type: object
    properties:
      id?:
        type: string
        description: A unique identifier for the user.
      imageUrl?:
        type: string
        description: The URL to the userâs avatar on Medium
      name?:
        type: string
        description: The userâs name on Medium.
      url?:
        type: string
        description: The URL to the userâs profile on Medium
      username?:
        type: string
        description: The userâs username on Medium.
    example:
      id: 5303d74c64f66366f00cb9b2a94f3251bf5
      imageUrl: https://images.medium.com/0*fkfQiTzT7TlUGGyI.png
      name: Jamie Talbot
      url: https://medium.com/@majelbstoat
      username: majelbstoat
  UserResponse:
    type: object
    properties:
      data?:
        type: User
    description: Container object for user info
    example:
      data:
        id: 5303d74c64f66366f00cb9b2a94f3251bf5
        imageUrl: https://images.medium.com/0*fkfQiTzT7TlUGGyI.png
        name: Jamie Talbot
        url: https://medium.com/@majelbstoat
        username: majelbstoat
    displayName: User Container
/me:
  get:
    description: Returns details of the user who has granted permission to the application.
    displayName: User details
    responses:
      200:
        description: OK
        body:
          application/json:
            type: UserResponse
      401:
        description: The `accessToken` is invalid or has been revoked.
/publications:
  /{publicationId}:
    uriParameters:
      publicationId:
        type: string
        description: A unique identifier for the publication.
        displayName: publicationId
    /contributors:
      get:
        description: This endpoint returns a list of contributors for a given publication. In other words, a list of Medium users who are allowed to publish under a publication, as well as a description of their exact role in the publication (for now, either an editor or a writer).
        displayName: Contributors of Publication
        responses:
          200:
            description: OK
            body:
              application/json:
                type: ContibutorResponse
          401:
            description: The `accessToken` is invalid or has been revoked.
    /posts:
      post:
        description: |
          creating a post and associating it with a publication on Medium. The request also shows this association, considering posts a collection of resources under a publication

          There are additional rules around publishing that each request to this API must respect:
            - If the authenticated user is an 'editor' for the publication, they can create posts with any publish status. Posts published as 'public' or 'unlisted' will appear in collection immediately, while posts created as 'draft' will remain in pending state under publication.
            - If the authenticated user is a 'writer' for the chosen publication, they can only create a post as a 'draft'. That post will remain in pending state under publication until an editor for the publication approves it.
            - If the authenticated user is neither a 'writer' nor an 'editor', they are not allowed to create any posts in a publication.
        displayName: Create Publication Post
        body:
          application/json: Post
        responses:
          200:
            description: OK
            body:
              application/json:
                type: PostDetails
          400:
            description: Required fields were invalid, not specified.
          401:
            description: The `accessToken` is invalid or has been revoked.
          403:
            description: The `publicationId` in request path doesnât point to a publication that the user can publish into.
/users:
  /{authorId}:
    uriParameters:
      authorId:
        type: string
        description: authorId is the user id of the authenticated user.
        displayName: authorId
    /posts:
      post:
        description: Creates a post on the authenticated userâs profile.
        displayName: Create User Post
        body:
          application/json: Post
        responses:
          200:
            description: OK
            body:
              application/json:
                type: PostDetails
          400:
            description: Required fields were invalid, not specified.
          401:
            description: The `accessToken` is invalid or has been revoked.
          403:
            description: The user does not have permission to publish, or the authorId in the request path points to wrong/non-existent user.
  /{userId}:
    uriParameters:
      userId:
        type: string
        description: A unique identifier for the user.
        displayName: userId
    /publications:
      get:
        description: Returns a full list of publications that the user is related to in some way. This includes all publications the user is subscribed to, writes to, or edits.
        displayName: User's publications
        responses:
          200:
            description: OK
            body:
              application/json:
                type: PublicationResponse
          401:
            description: The `accessToken` is invalid, lacks the `listPublications` scope or has been revoked.
          403:
            description: The request attempts to list publications for another user.
