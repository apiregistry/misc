#%RAML 1.0
title: Instagram
version: 1.0.0
baseUri: api.instagram.com/v1
description: |
  Description of Instagram RESTful API.

  Current limitations:
    * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
    for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.
    * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)
    that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and
    started in [Sandbox Mode](http://instagram.com/developer/sandbox/).
    * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.

  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses
  containing media objects no longer return the `data` field in `comments` and `likes` nodes.

  Last update: 2015-11-28
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
securitySchemes:
  api_key:
    type: Pass Through
  instagram_auth:
    type: OAuth 2.0
    settings:
      authorizationGrants:
      - implicit
      authorizationUri: https://instagram.com/oauth/authorize/
      accessTokenUri: https://instagram.com/oauth/authorize/
      scopes:
      - basic
      - comments
      - follower_list
      - likes
      - public_content
      - relationships
types:
  CaptionData:
    type: object
    properties:
      created_time?:
        type: string
        description: Caption creation UNIX timestamp
      from?:
        type: UserShortInfo
        description: User who created this caption
      id?:
        type: string
        description: ID of this caption
      text?:
        type: string
        description: Caption text
  CommentEntry:
    type: object
    properties:
      created_time?:
        type: string
        description: Comment creation UNIX timestamp
      from?:
        type: UserShortInfo
        description: User who posted this comment
      id?:
        type: string
        description: ID of this comment
      text?:
        type: string
        description: Text of the comment
  CommentsCollection:
    type: object
    properties:
      count?:
        type: integer
        description: Nember of comments available, data does not necessary contain all comments
      data?:
        type: array
        description: Collection of comment entries; **warning:** deprecated for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/)
        items:
          type: CommentEntry
  CommentsResponse:
    type: object
    properties:
      data?:
        type: array
        description: Collection of comments
        items:
          type: CommentEntry
      meta?:
        type: MetaData
        description: Response meta-data
  CursorPaginationInfo:
    type: object
    properties:
      next_cursor?:
        type: string
        description: The cursor ID of the next page
      next_url?:
        type: string
        description: URL to retrieve next page of entries
  IdPaginationInfo:
    type: object
    properties:
      next_max_id?:
        type: string
        description: The max ID of the next page
      next_url?:
        type: string
        description: URL to retrieve next page of entries
  ImageInfo:
    type: object
    properties:
      height?:
        type: integer
        description: Image/video height in pixels
      url?:
        type: string
        description: URL of the image/video resource
      width?:
        type: integer
        description: Image/video width in pixels
  ImagesData:
    type: object
    properties:
      low_resolution?:
        type: ImageInfo
        description: Image in low resolution
      standard_resolution?:
        type: ImageInfo
        description: Image in standard resolution
      thumbnail?:
        type: ImageInfo
        description: Thumbnail of the image
  LikesCollection:
    type: object
    properties:
      count?:
        type: integer
        description: Nember of likes available, data does not necessary contain all comments
      data?:
        type: array
        description: Collection of users who liked; **warning:** deprecated for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/)
        items:
          type: UserShortInfo
  LocationInfo:
    type: object
    properties:
      id?:
        type: string
        description: ID of this location (in some responses it has a type of 'integer')
      latitude?:
        type: number
        description: Location latitude
        format: double
      longitude?:
        type: number
        description: Location longitude
        format: double
      name?:
        type: string
        description: Location name
  LocationInfoResponse:
    type: object
    properties:
      data?:
        type: LocationInfo
        description: Location brief information
      meta?:
        type: MetaData
        description: Response meta-data
  LocationSearchResponse:
    type: object
    properties:
      data?:
        type: array
        description: List of found locations
        items:
          type: LocationInfo
      meta?:
        type: MetaData
        description: Response meta-data
  MediaEntry:
    type: object
    properties:
      attribution?:
        type: string
        description: ??? Unknown ???
      caption?:
        type: CaptionData
        description: Describes caption of this media
      comments?:
        type: CommentsCollection
        description: Comments of this media entry
      created_time?:
        type: string
        description: Media creation UNIX timestamp
      filter?:
        type: string
        description: Filter of this media entry
      id?:
        type: string
        description: ID of a media entry
      images?:
        type: ImagesData
        description: Images data in different resolutions
      likes?:
        type: LikesCollection
        description: Likes of this media entry
      link?:
        type: string
        description: Fixed URL of this media entry
      location?:
        type: LocationInfo
        description: Location data for this media if available
      tags?:
        type: array
        description: List of tags assigned to this media
        items:
          type: string
      type?:
        type: string
        description: Type of this media entry
        enum:
        - image
        - video
      user?:
        type: UserShortInfo
        description: User who posted this media
      user_has_liked?:
        type: boolean
        description: Indicates whether authenticated user has liked this media or not
      users_in_photo?:
        type: array
        description: Users located on this media entry
        items:
          type: UserInPhoto
      videos?:
        type: VideosData
        description: Videos data in different resolutions, applied for 'video' type
  MediaEntryResponse:
    type: object
    properties:
      data?:
        type: MediaEntry
        description: Media resource information
      meta?:
        type: MetaData
        description: Response meta-data
  MediaListResponse:
    type: object
    properties:
      data?:
        type: array
        description: List of media entries
        items:
          type: MediaEntry
      meta?:
        type: MetaData
        description: Response meta-data
      pagination?:
        type: IdPaginationInfo
        description: Information for pagination
  MediaSearchResponse:
    type: object
    properties:
      data?:
        type: array
        description: Found media entries; some end-points do not return likes informtaion
        items:
          type: MediaEntry
      meta?:
        type: MetaData
        description: Response meta-data
  MetaData:
    type: object
    properties:
      code?:
        type: integer
        description: HTTP result code
        format: int32
  Position:
    type: object
    properties:
      x?:
        type: number
        description: X position (horizontal)
        format: float
      y?:
        type: number
        description: Y position (vertical)
        format: float
  RelationshipInfo:
    type: object
    properties:
      incoming_status?:
        type: string
        description: Status of incoming relationship
        enum:
        - none
        - followed_by
        - requested_by
      outgoing_status?:
        type: string
        description: Status of outgoing relationship
        enum:
        - none
        - follows
        - requested
      target_user_is_private?:
        type: boolean
        description: Indicates whether target user is private or not
  RelationshipPostResponse:
    type: object
    properties:
      data?:
        type: RelationshipStatus
        description: Current relationship status
      meta?:
        type: MetaData
        description: Response meta-data
  RelationshipResponse:
    type: object
    properties:
      data?:
        type: RelationshipInfo
        description: Relationship information
      meta?:
        type: MetaData
        description: Response meta-data
  RelationshipStatus:
    type: object
    properties:
      outgoing_status?:
        type: string
        description: Status of outgoing relationship
        enum:
        - none
        - follows
        - requested
  StatusResponse:
    type: object
    properties:
      data?:
        type: string
        description: No data - 'null'
      meta?:
        type: MetaData
        description: Response meta-data
  TagInfo:
    type: object
    properties:
      media_count?:
        type: integer
        description: Overall number of media entries taged with this name
        format: int64
      name?:
        type: string
        description: Tag name
  TagInfoResponse:
    type: object
    properties:
      data?:
        type: TagInfo
        description: Tag brief information
      meta?:
        type: MetaData
        description: Response meta-data
  TagMediaListResponse:
    type: object
    properties:
      data?:
        type: array
        description: List of media entries with this tag
        items:
          type: MediaEntry
      meta?:
        type: MetaData
        description: Response meta-data
      pagination?:
        type: TagPaginationInfo
        description: Information for pagination
  TagPaginationInfo:
    type: object
    properties:
      deprecation_warning?:
        type: string
        description: The deprication warning, if information is available
      min_tag_id?:
        type: string
        description: The min ID of a tag for the next page
      next_max_id?:
        type: string
        description: Depricated. Use min_tag_id instead
      next_max_tag_id?:
        type: string
        description: The max ID of a tag for the next page
      next_min_id?:
        type: string
        description: Depricated. Use max_tag_id instead
      next_url?:
        type: string
        description: URL to retrieve next page of entries
  TagSearchResponse:
    type: object
    properties:
      data?:
        type: array
        description: List of found tags with brief statistics
        items:
          type: TagInfo
      meta?:
        type: MetaData
        description: Response meta-data
  UserCounts:
    type: object
    properties:
      followed_by?:
        type: integer
        description: Number of followers of this user
        format: int32
      follows?:
        type: integer
        description: Number of users followed by this user
        format: int32
      media?:
        type: integer
        description: Number of user media
        format: int32
  UserInPhoto:
    type: object
    properties:
      position?:
        type: Position
        description: Position in photo
      user?:
        type: UserShortInfo
        description: User who is indicated on the photo
  UserInfo:
    type: object
    properties:
      bio?:
        type: string
        description: User biography
      counts?:
        type: UserCounts
        description: User statistics (counters)
      full_name?:
        type: string
        description: User full name
      id?:
        type: string
        description: User ID
      profile_picture?:
        type: string
        description: URL to user profile picture
      username?:
        type: string
        description: User name, nickname
      website?:
        type: string
        description: URL to user web-site
  UserResponse:
    type: object
    properties:
      data?:
        type: UserInfo
        description: User basic information
      meta?:
        type: MetaData
        description: Response meta-data
  UserShortInfo:
    type: object
    properties:
      full_name?:
        type: string
        description: User full name
      id?:
        type: string
        description: User ID
      profile_picture?:
        type: string
        description: URL to user profile picture
      username?:
        type: string
        description: User name, nickname
  UsersInfoResponse:
    type: object
    properties:
      data?:
        type: array
        description: User short information entries
        items:
          type: UserShortInfo
      meta?:
        type: MetaData
        description: Response meta-data
  UsersPagingResponse:
    type: object
    properties:
      data?:
        type: array
        description: List of user short information entries
        items:
          type: UserShortInfo
      meta?:
        type: MetaData
        description: Response meta-data
      pagination?:
        type: CursorPaginationInfo
        description: Information for pagination
  VideosData:
    type: object
    properties:
      low_resolution?:
        type: ImageInfo
        description: Video in low resolution
      standard_resolution?:
        type: ImageInfo
        description: Video in standard resolution
/geographies:
  /{geo-id}:
    uriParameters:
      geo-id:
        type: string
        description: The geography ID.
        displayName: geo-id
    /media:
      /recent:
        get:
          description: |
            Get recent media from a geography subscription that you created.

            **Note:** You can only access Geographies that were explicitly created by your OAuth client. Check the
            Geography Subscriptions section of the [real-time updates page](https://instagram.com/developer/realtime/).
            When you create a subscription to some geography that you define, you will be returned a unique `geo-id` that
            can be used in this query. To backfill photos from the location covered by this geography, use the
            [media search endpoint](https://instagram.com/developer/endpoints/media/).

            **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
          displayName: Get recent media from a custom geo-id.
          queryParameters:
            count?:
              type: integer
              description: Max number of media to return.
              displayName: count
              format: int32
            min_id?:
              type: string
              description: Return media before this `min_id`.
              displayName: min_id
          responses:
            200:
              description: List of recent media entries from a geography subscription.
              body:
                application/json:
                  type: MediaListResponse
          (commons.Depricated): null
/locations:
  /search:
    get:
      description: Search for a location by geographic coordinate.
      displayName: Search for a location by geographic coordinate.
      queryParameters:
        distance?:
          type: integer
          description: Default is 1000m (distance=1000), max distance is 5000.
          displayName: distance
          format: int32
        facebook_places_id?:
          type: string
          description: Returns a location mapped off of a Facebook places id. If used, a Foursquare id and `lat`, `lng` are not required.
          displayName: facebook_places_id
        foursquare_id?:
          type: string
          description: |
            Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use
            `lat` and `lng`. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.
          displayName: foursquare_id
        lat?:
          type: number
          description: Latitude of the center search coordinate. If used, `lng` is required.
          displayName: lat
          format: double
        lng?:
          type: number
          description: Longitude of the center search coordinate. If used, `lat` is required.
          displayName: lng
          format: double
        foursquare_v2_id?:
          type: string
          description: |
            Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use
            `lat` and `lng`.
          displayName: foursquare_v2_id
      responses:
        200:
          description: List of found locations.
          body:
            application/json:
              type: LocationSearchResponse
  /{location-id}:
    uriParameters:
      location-id:
        type: string
        description: The location ID.
        displayName: location-id
    /media:
      /recent:
        get:
          description: Get a list of recent media objects from a given location.
          displayName: Get a list of recent media objects from a given location.
          queryParameters:
            min_timestamp?:
              type: integer
              description: Return media after this UNIX timestamp.
              displayName: min_timestamp
              format: int64
            max_timestamp?:
              type: integer
              description: Return media before this UNIX timestamp.
              displayName: max_timestamp
              format: int64
            min_id?:
              type: string
              description: Return media before this `min_id`.
              displayName: min_id
            max_id?:
              type: string
              description: Return media after this `max_id`.
              displayName: max_id
          responses:
            200:
              description: List of media entries from this location.
              body:
                application/json:
                  type: MediaListResponse
    get:
      description: Get information about a location.
      displayName: Get information about a location.
      responses:
        200:
          description: Location information response.
          body:
            application/json:
              type: LocationInfoResponse
/media:
  /popular:
    get:
      description: |
        Get a list of what media is most popular at the moment. Can return mix of `image` and `video` types.

        **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
      displayName: Get a list of currently popular media.
      responses:
        200:
          description: Found media resources (without likes information).
          body:
            application/json:
              type: MediaSearchResponse
      (commons.Depricated): null
  /search:
    get:
      description: |
        Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days.
        Defaults time stamps cover the last 5 days. Can return mix of `image` and `video` types.
      displayName: Search for media in a given area.
      queryParameters:
        lat:
          type: number
          description: Latitude of the center search coordinate. If used, `lng` is required.
          displayName: lat
          format: double
        lng:
          type: number
          description: Longitude of the center search coordinate. If used, `lat` is required.
          displayName: lng
          format: double
        min_timestamp?:
          type: integer
          description: A unix timestamp. All media returned will be taken later than this timestamp.
          displayName: min_timestamp
          format: int64
        max_timestamp?:
          type: integer
          description: A unix timestamp. All media returned will be taken earlier than this timestamp.
          displayName: max_timestamp
          format: int64
        distance?:
          type: integer
          description: Default is 1km (distance=1000), max distance is 5km.
          displayName: distance
          format: int32
      responses:
        200:
          description: Found media resources (without likes information) in a given area.
          body:
            application/json:
              type: MediaSearchResponse
  /shortcode:
    /{shortcode}:
      uriParameters:
        shortcode:
          type: string
          description: The short code of the media resource.
          displayName: shortcode
      get:
        description: |
          This endpoint returns the same response as `GET /media/{media-id}`.

          A media object's shortcode can be found in its shortlink URL. An example shortlink is
          `http://instagram.com/p/D/`, its corresponding shortcode is `D`.
        displayName: Get information about a media object.
        responses:
          200:
            description: Media resource information.
            body:
              application/json:
                type: MediaEntryResponse
  /{media-id}:
    uriParameters:
      media-id:
        type: string
        description: The ID of the media resource.
        displayName: media-id
    /comments:
      /{comment-id}:
        uriParameters:
          comment-id:
            type: string
            description: The ID of the comment entry.
            displayName: comment-id
        delete:
          description: |
            Remove a comment either on the authenticated user's media object or authored by the authenticated user.
          displayName: Remove a comment.
          responses:
            200:
              description: Result of deleting a comment.
              body:
                application/json:
                  type: StatusResponse
      get:
        description: Get a list of recent comments on a media object.
        displayName: Get a list of recent comments on a media object.
        responses:
          200:
            description: List of comments of the media resource.
            body:
              application/json:
                type: CommentsResponse
      post:
        description: |
          Create a comment on a media object with the following rules:

            * The total length of the comment cannot exceed 300 characters.
            * The comment cannot contain more than 4 hashtags.
            * The comment cannot contain more than 1 URL.
            * The comment cannot consist of all capital letters.
        displayName: Create a comment on a media object.
        queryParameters:
          text:
            type: string
            description: Text to post as a comment on the media object as specified in `media-id`.
            displayName: text
        responses:
          200:
            description: Result of posting a comment.
            body:
              application/json:
                type: StatusResponse
    /likes:
      get:
        description: Get a list of users who have liked this media.
        displayName: Get a list of users who have liked this media.
        responses:
          200:
            description: List of users who liked the media resource.
            body:
              application/json:
                type: UsersInfoResponse
      delete:
        description: Remove a like on this media by the currently authenticated user.
        displayName: Remove a like on this media by the current user.
        responses:
          200:
            description: Result of removing a like.
            body:
              application/json:
                type: StatusResponse
      post:
        description: Set a like on this media by the currently authenticated user.
        displayName: Set a like on this media by the current user.
        responses:
          200:
            description: Result of setting a like.
            body:
              application/json:
                type: StatusResponse
    get:
      description: |
        Get information about a media object. The returned type key will allow you to differentiate between image and
        video media.

        **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells
        you whether the current user has liked this media item.
      displayName: Get information about a media object.
      responses:
        200:
          description: Media resource information.
          body:
            application/json:
              type: MediaEntryResponse
/tags:
  /search:
    get:
      description: Search for tags by name.
      displayName: Search for tags by name.
      queryParameters:
        q:
          type: string
          description: A valid tag name without a leading \#. (eg. snowy, nofilter)
          displayName: q
      responses:
        200:
          description: List of found tags and their statistics.
          body:
            application/json:
              type: TagSearchResponse
  /{tag-name}:
    uriParameters:
      tag-name:
        type: string
        description: The tag name.
        displayName: tag-name
    /media:
      /recent:
        get:
          description: |
            Get a list of recently tagged media. Use the `max_tag_id` and `min_tag_id` parameters in the pagination
            response to paginate through these objects.
          displayName: Get a list of recently tagged media.
          queryParameters:
            count?:
              type: integer
              description: Count of tagged media to return.
              displayName: count
            min_tag_id?:
              type: string
              description: Return media before this `min_tag_id`.
              displayName: min_tag_id
            max_tag_id?:
              type: string
              description: Return media after this `max_tag_id`.
              displayName: max_tag_id
          responses:
            200:
              description: List of media entries with this tag.
              body:
                application/json:
                  type: TagMediaListResponse
    get:
      description: Get information about a tag object.
      displayName: Get information about a tag object.
      responses:
        200:
          description: Tag information response.
          body:
            application/json:
              type: TagInfoResponse
/users:
  /search:
    get:
      description: Search for a user by name.
      displayName: Search for a user by name.
      queryParameters:
        q:
          type: string
          description: A query string.
          displayName: q
        count?:
          type: integer
          description: Number of users to return.
          displayName: count
      responses:
        200:
          description: List of found users.
          body:
            application/json:
              type: UsersInfoResponse
  /self:
    /feed:
      get:
        description: |
          See the authenticated user's feed.

          **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
        displayName: See the authenticated user's feed.
        queryParameters:
          count?:
            type: integer
            description: Count of media to return.
            displayName: count
          min_id?:
            type: string
            description: Return media later than this `min_id`.
            displayName: min_id
          max_id?:
            type: string
            description: Return media earlier than this `max_id`.
            displayName: max_id
        responses:
          200:
            description: Users feed entries.
            body:
              application/json:
                type: MediaListResponse
        (commons.Depricated): null
    /media:
      /liked:
        get:
          description: |
            See the list of media liked by the authenticated user. Private media is returned as long as the authenticated
            user has permission to view that media. Liked media lists are only available for the currently authenticated
            user.
          displayName: See the list of media liked by the authenticated user.
          queryParameters:
            count?:
              type: integer
              description: Count of media to return.
              displayName: count
            max_like_id?:
              type: string
              description: Return media liked before this id.
              displayName: max_like_id
          responses:
            200:
              description: Users media entries.
              body:
                application/json:
                  type: MediaListResponse
    /requested-by:
      get:
        description: List the users who have requested this user's permission to follow.
        displayName: List the users who have requested this user's permission to follow.
        responses:
          200:
            description: List of users who have requested this user's permission to follow.
            body:
              application/json:
                type: UsersInfoResponse
  /{user-id}:
    uriParameters:
      user-id:
        type: string
        description: The ID of a user to get information about, or **self** to retrieve information about authenticated user.
        displayName: user-id
    /followed-by:
      get:
        description: |
          Get the list of users this user is followed by. To get users followed by the owner of the access token, you
          can use **self** instead of the `user-id`.
        displayName: Get the list of users this user is followed by.
        responses:
          200:
            description: List of users this user is followed by.
            body:
              application/json:
                type: UsersPagingResponse
    /follows:
      get:
        description: |
          Get the list of users this user follows. To get follows of the owner of the access token, you can use **self**
          instead of the `user-id`.
        displayName: Get the list of users this user follows.
        responses:
          200:
            description: List of users this user follows.
            body:
              application/json:
                type: UsersPagingResponse
    /media:
      /recent:
        get:
          description: |
            Get the most recent media published by a user. To get the most recent media published by the owner of the
            access token, you can use **self** instead of the `user-id`.

            Security scope `public_content` is required to read information about other users.
          displayName: Get the most recent media published by a user.
          queryParameters:
            count?:
              type: integer
              description: Count of media to return.
              displayName: count
            max_timestamp?:
              type: integer
              description: Return media before this UNIX timestamp.
              displayName: max_timestamp
              format: int64
            min_timestamp?:
              type: integer
              description: Return media after this UNIX timestamp.
              displayName: min_timestamp
              format: int64
            min_id?:
              type: string
              description: Return media later than this `min_id`.
              displayName: min_id
            max_id?:
              type: string
              description: Return media earlier than this `max_id`.
              displayName: max_id
          responses:
            200:
              description: Users media entries.
              body:
                application/json:
                  type: MediaListResponse
    /relationship:
      get:
        description: Get information about a relationship to another user.
        displayName: Get information about a relationship to another user.
        responses:
          200:
            description: Relationship information.
            body:
              application/json:
                type: RelationshipResponse
      post:
        description: Modify the relationship between the current user and the target user.
        displayName: Modify the relationship between the current user and the target user.
        queryParameters:
          action:
            type: string
            description: Type of action to apply for relationship with the user.
            displayName: action
            enum:
            - follow
            - unfollow
            - block
            - unblock
            - approve
            - ignore
        responses:
          200:
            description: Relationship information.
            body:
              application/json:
                type: RelationshipPostResponse
    get:
      description: |
        Get basic information about a user. To get information about the owner of the access token, you can use
        **self** instead of the `user-id`.

        Security scope `public_content` is required to read information about other users.
      displayName: Get basic information about a user.
      responses:
        200:
          description: User basic information.
          body:
            application/json:
              type: UserResponse
        404:
          description: Not Found, user with such ID does not exist.
