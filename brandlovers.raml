#%RAML 1.0
title: BrandLovers Marketplace API V1
version: 1.0.0
baseUri: api.brandlovers.com/marketplace/v1
description: 'Allows sellers to: 1) Load products definitions to the BrandLovers marktplace.
  2) Receive and update orders status. 3) Receive and update shipping information.
  4) Receive and update customer tickets. All requests consume and return application/json
  content. All request must be authenticated and use HTTPS.'
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
securitySchemes:
  authorization:
    type: Pass Through
types:
  Address:
    type: object
    properties:
      address:
        type: string
        description: Address first line (ave, street name, etc..)
      city:
        type: string
        description: City
      complement:
        type: string
        description: Complementary info (aptartament number, building name, suite)
      countryId:
        type: string
        description: 'Contry code using aplpha ISO-3166, Example: BR, US, AR, GB,
          CN'
      neighbourhood:
        type: string
        description: Address neighbourhood
      number:
        type: string
        description: Address number
      recipientName?:
        type: string
        description: Recipient Name
      reference?:
        type: string
        description: Pontos de referÃªncia
      state:
        type: string
        description: State
      zipCode:
        type: string
        description: Zip Code
  ControlledStock:
    type: object
    properties:
      crossDockingTime?:
        type: integer
        description: Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the ETA informed to the customer
      quantity:
        type: integer
        description: Quantity of product available for sale
      reserved?:
        type: integer
        description: Locked product invetory for orders that are not approved and are not ready to fullfil.
  Courier:
    type: object
    properties:
      name:
        type: string
        description: Courier name
      taxID?:
        type: string
        description: Courier taxId information. For example CNPJ
  Customer:
    type: object
    properties:
      documentNumber:
        type: string
        description: Customer tax information
      email?:
        type: string
        description: 'Customer Email (when available). Please note: Email is not a
          mandatory field'
      id:
        type: string
        description: Customer unqiue Id
      name:
        type: string
        description: Customer Name
      phones:
        type: array
        description: Customer phone number
        items:
          type: Phone
      type:
        type: string
        description: 'Customer type: Enterprise or Consumer'
  CustomerReference:
    type: object
    properties:
      name?:
        type: string
        description: Customer name
      phoneNumber?:
        type: string
        description: Customer phone mumber
  Dimensions:
    type: object
    properties:
      height:
        type: integer
        description: Product height in millimeters. No commas or periods are accepeted. For example one meter produc must be informed as 1000. Another example 1 meter and 23 centimeters should be informed solely as 1230
      length:
        type: integer
        description: Product length in millimeters. No commas or periods are accepeted. For example one meter produc must be informed as 1000. Another example 1 meter and 23 centimeters should be informed solely as 1230
      weight:
        type: integer
        description: Product weight in Grams. No commas or periods are accepeted. For example one killo must be informed as 1000. Another example 1 Kilo and 234 grams should be informed solely as 1234
      width:
        type: integer
        description: Product width in millimeters. No commas or periods are accepeted. For example one meter produc must be informed as 1000. Another example 1 meter and 23 centimeters should be informed solely as 1230
  Error:
    type: object
    properties:
      message:
        type: string
        description: Friendly message describing the error
      skuSellerId?:
        type: string
        description: When applicabe will include `skuSellerId` related to this error
      type:
        type: string
        description: Error type
  Freight:
    type: object
    properties:
      ETA?:
        type: datetime
        description: Estimated time of arrival
      additionalInfo:
        type: string
        description: Aditional information for the courier
      chargedAmount:
        type: integer
        description: Shipment cost. Must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
      crossDockingTime:
        type: integer
        description: Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
      defaultAmount:
        type: integer
        description: Default value of this shippment.
      scheduledPeriod?:
        type: string
        description: Scheduled period
      transitTime:
        type: integer
        description: Deliver time in seconds. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
      type?:
        type: string
        description: Freight type
  GetOrders:
    type: object
    properties:
      metadata:
        type: array
        items:
          type: Metadata
      orders:
        type: array
        items:
          type: Order
  GetOrdersShipments:
    type: object
    properties:
      metadata?:
        type: array
        description: Response payload
        items:
          type: Metadata
      shipments?:
        type: array
        description: Order Shippment Status
        items:
          type: OrderShippmentStatus
  GetProduct:
    type: object
    properties:
      attributes:
        type: array
        items:
          type: ProductAttribute
      brand:
        type: string
        description: Brand name
      categories:
        type: array
        description: Array of categories associated with this product
        items:
          type: string
      description:
        type: string
        description: Product text description.
      dimensions?:
        type: Dimensions
      errors?:
        type: array
        items:
          type: Error
      giftWrap?:
        type: GiftWrap
      gtin?:
        type: array
        description: Array of product EAN and/or ISBN and/or ASIN codes
        items:
          type: string
      images:
        type: array
        description: List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
        items:
          type: string
      price:
        type: ProductPrice
      productGroupId?:
        type: string
        description: Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system
      status:
        type: string
        description: Product status
      stock:
        type: integer
        description: Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
      title:
        type: string
        description: Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
      videos?:
        type: array
        description: List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.
        items:
          type: string
  GetProductsResponse:
    type: object
    properties:
      metadata?:
        type: array
        description: Payload with response
        items:
          type: Metadata
      skus?:
        type: array
        items:
          type: GetProduct
  GetProductsStatusSelling:
    type: object
    properties:
      metadata:
        type: array
        items:
          type: Metadata
      sellerItems:
        type: array
        items:
          type: SellerItem
  GetSellerProductStatus:
    type: object
    properties:
      errors?:
        type: array
        items:
          type: Error
      price:
        type: ProductPrice
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system.
      status:
        type: string
        description: Product status in the marketplace
      stock:
        type: integer
        description: Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
  GetSellerProductsStatus:
    type: object
    properties:
      metadata?:
        type: array
        description: Response payload
        items:
          type: Metadata
      skus?:
        type: array
        description: Status of the products from the seller
        items:
          type: GetSellerProductStatus
  GetTicketMessages:
    type: object
    properties:
      messages?:
        type: array
        items:
          type: TicketMessage
      metadata:
        type: array
        items:
          type: Metadata
  GetTickets:
    type: object
    properties:
      metadata?:
        type: array
        items:
          type: Metadata
      tickets?:
        type: array
        items:
          type: Ticket
  GiftCard:
    type: object
    properties:
      from:
        type: string
        description: Giftcard `from` field
      message:
        type: string
        description: Giftcard `body` message
      to:
        type: string
        description: Giftcard `to` field
  GiftWrap:
    type: object
    properties:
      available:
        type: boolean
        description: Flag that defines if this product is eligible for giftwrapping
      messageSupport?:
        type: boolean
        description: Flag that defines if seller supports giftwrapp with a message
      value:
        type: integer
        description: Amount charged for gift wrap. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
  Image:
    type: object
    properties:
      main:
        type: boolean
        description: Sets as main image
      type:
        type: string
        description: Image format
      url:
        type: string
        description: Image URL
  Invoice:
    type: object
    properties:
      accessKey:
        type: string
        description: NÃºmero da chave de acesso Ã  nota fiscal. A chave possui 44 dÃ­gitos e contÃ©m todas as informaÃ§Ãµes da DANFE
      cnpj?:
        type: string
        description: CNPJ responsÃ¡vel pelo envio dos produtos. Pode ser diferente caso a empresa possua diversos Centros de DistribuiÃ§Ã£o (CDs)
      issuedAt?:
        type: datetime
        description: Data de emissÃ£o da Nota Fiscal
      linkDanfe?:
        type: string
        description: Url para consulta da DANFE
      linkXml?:
        type: string
        description: Url para consulta da NFE
      number:
        type: string
        description: NÃºmero da Nota Fiscal
      serie:
        type: string
        description: NÃºmero de serie da Nota Fiscal
  Metadata:
    type: object
    properties:
      key:
        type: string
        description: JSON attribute key
      value:
        type: string
        description: JSON object value
  NewTicket:
    type: object
    properties:
      body:
        type: string
        description: Message to the customer
      customer?:
        type: CustomerReference
      description?:
        type: string
        description: Trouble ticked brief description
      from:
        type: string
        description: Friendly name of the person sending this message, if not provided the seller `name` will be used
      message?:
        type: NewTicketMessage
      orderId:
        type: string
        description: Unique order Id that this trouble ticket belongs to
      type:
        type: string
        description: Trouble ticket type.
    description: JSON object with new trouble ticket
  NewTicketMessage:
    type: object
    properties:
      body:
        type: string
        description: Message text
      visibility:
        type: string
        description: Defines if this message is `CUSTOMER` (customer will receive a copy) or `INTERNAL`
    description: New message object to append to trouble ticket.
  NewTrackingRefund:
    type: object
    properties:
      courier?:
        type: Courier
      cte?:
        type: string
        description: Conhecimento do Transporte EletrÃ´nico
      info:
        type: string
        description: Aditional information about this shippment
      items:
        type: array
        items:
          type: OrderItemReference
      number?:
        type: string
        description: Tracking Id in the courier
      occurredAt?:
        type: datetime
        description: Date time that this was created
      sellerShipmentId?:
        type: string
        description: Unique Seller shipment Id. This must be unique across all orders and shipments
      tranckingUrl?:
        type: string
        description: Courier tracking URL
  Newshipmentstatus:
    type: object
    properties:
      courier:
        type: Courier
      cte?:
        type: string
        description: Conhecimento do Transporte EletrÃ´nico
      invoice:
        type: Invoice
      items:
        type: array
        description: List of Order IDs of this items from this order that will be updated in this shipment
        items:
          type: string
      number?:
        type: string
        description: Unique id shipment Id in the courier system
      occurredAt:
        type: datetime
        description: Data da ocorrÃªncia
      sellerShipmentId:
        type: string
        description: Unique Seller shipment Id. This must be unique across all orders and shipmnents
      trackingUrl?:
        type: string
        description: Courier tracking URL
  Order:
    type: object
    properties:
      approvedAt?:
        type: datetime
        description: Date that this order was approved for fullfilment
      billingAddress:
        type: Address
      createdAt:
        type: datetime
        description: Date that this order was created
      customer:
        type: Customer
      freight:
        type: Freight
      items:
        type: array
        items:
          type: OrderItem
      orderId:
        type: string
        description: Unique order Id (related to this seller)
      orderMarketplaceId:
        type: string
        description: Unique Order Id that will be displayed to the customer. This Id is not the same as `orderId`
      seller?:
        type: Seller
      shipments:
        type: array
        items:
          type: Shippment
      shippingAddress:
        type: Address
      status:
        type: string
        description: Order status
      totalAmount:
        type: integer
        description: Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
      totalDiscountAmount:
        type: integer
        description: Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
      totalItemsAmount:
        type: integer
        description: Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
      totalShippingAmount:
        type: integer
        description: Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
      updatedAt:
        type: datetime
        description: Last update data of this order
  OrderGiftWrap:
    type: object
    properties:
      available:
        type: boolean
        description: Defines if giftwrpping is available for this product.
      giftCard?:
        type: GiftCard
      messageSupport?:
        type: boolean
        description: Defines if giftwrpping is available for this product.
      value:
        type: integer
        description: Amount charged for gift wrap. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
  OrderItem:
    type: object
    properties:
      freight:
        type: Freight
      giftWrap?:
        type: OrderGiftWrap
      id:
        type: string
        description: Unique Id representing this item
      name:
        type: string
        description: Product name
      promotions?:
        type: array
        description: Promotions array
        items:
          type: Promotion
      salePrice:
        type: integer
        description: Product unit price
      sent:
        type: boolean
        description: Flag if product was already shipped
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system
  OrderItemReference:
    type: object
    properties:
      quantity:
        type: integer
        description: Quantity of items
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system. This is the key that defines witch product will be updated
  OrderShippment:
    type: object
    properties:
      courier?:
        type: Courier
      cte?:
        type: string
        description: Conhecimento de Transporte EletÃ´niconico
      invoice?:
        type: Invoice
      items?:
        type: array
        items:
          type: OrderItemReference
      number?:
        type: string
        description: Courier unique trackign Id associated with this shipment
      occurredAt?:
        type: datetime
        description: Date that this shippment was shiped
      order?:
        type: string
        description: Order unique Id
      sellerShipmentId?:
        type: string
        description: Unique Seller shipment Id. This must be unique across all orders and shipments
      status?:
        type: string
        description: Shipment status.
      trackingUrl?:
        type: string
        description: Courier tracking URL
  OrderShippmentStatus:
    type: object
    properties:
      errors?:
        type: array
        items:
          type: Error
      items?:
        type: array
        items:
          type: OrderItemReference
      shipmentId?:
        type: string
        description: Shippment unique Id
      status?:
        type: string
        description: Shipment status
      trackingUrl?:
        type: string
        description: Courier tracking URL
  OrdersShipments:
    type: object
    properties:
      shipments?:
        type: array
        items:
          type: OrderShippment
    description: JSON payload with list of shippments of orders.
  Phone:
    type: object
    properties:
      number:
        type: string
        description: Phone number
      type:
        type: string
        description: Phone number type, home, office, mobile, etc
  Product:
    type: object
    properties:
      attributes:
        type: array
        description: List of `key` `value` attributes of this product. This is very important for search and SEO optmization. Include all relevant information
        items:
          type: ProductAttribute
      brand:
        type: string
        description: Brand name
      categories:
        type: array
        description: Array of categories associated with this product
        items:
          type: string
      description:
        type: string
        description: Product description.
      dimensions?:
        type: Dimensions
      giftWrap?:
        type: GiftWrap
      gtin?:
        type: array
        description: Array of product EAN and/or ISBN and/or ASIN codes
        items:
          type: string
      images:
        type: array
        description: List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
        items:
          type: string
      price:
        type: ProductPrice
      productGroupId?:
        type: string
        description: Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..
      productId?:
        type: string
        description: Brand Lovers Product ID. Use this to suggest a product association. This field is optional.
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system
      stock:
        type: integer
        description: Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
      title:
        type: string
        description: Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
      videos?:
        type: array
        description: List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.
        items:
          type: string
    description: New Produt that will be create
  ProductAttribute:
    type: object
    properties:
      name:
        type: string
        description: Attribute name
      value:
        type: string
        description: Attribute value
  ProductPrice:
    type: object
    properties:
      default:
        type: integer
        description: List price, also known as MSRP (Manufacturer Suggest Retail Price) or the recommended retail price (RRP). All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
      offer:
        type: integer
        description: Product price. This is what will be offered to the customer. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
    description: JSON document with the SKU price
  ProductReference:
    type: object
    properties:
      href:
        type: string
        description: Link para acesso ao recurso
      id:
        type: string
        description: ID do recurso
  ProductSiteReference:
    type: object
    properties:
      skuSellerId:
        type: string
        description: Seller unique product Id
      url:
        type: string
        description: Link do produto no site
  ProductStatusUpdate:
    type: object
    properties:
      active:
        type: boolean
        description: Defines if this product is ready for sale. Active `true`, disabled `false`
      skuSellerId:
        type: string
        description: Seller product unique Id that will be updated
  ProductStock:
    type: object
    properties:
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system
      stocks:
        type: array
        description: Invetory information
        items:
          type: Stock
  ProductUpdate:
    type: object
    properties:
      attributes?:
        type: array
        description: List of `key` `value` attributes of this product. This is very important for search and SEO optmization. Include all relevant information
        items:
          type: ProductAttribute
      brand?:
        type: string
        description: Brand name
      categories?:
        type: array
        description: Array of categories associated with this product
        items:
          type: string
      description?:
        type: string
        description: Product text description.
      dimensions?:
        type: Dimensions
      giftWrap?:
        type: GiftWrap
      gtin?:
        type: array
        description: Array of product EAN and/or ISBN and/or ASIN codes
        items:
          type: string
      images?:
        type: array
        description: List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
        items:
          type: string
      price?:
        type: ProductPrice
      productGroupId?:
        type: string
        description: Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..
      productId?:
        type: string
        description: Brand Lovers Product Id. Use this to recommend a product association
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system
      stock?:
        type: integer
        description: Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
      title?:
        type: string
        description: Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
      videos?:
        type: array
        description: List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.
        items:
          type: string
    description: New product information.
  Promotion:
    type: object
    properties:
      amount?:
        type: integer
        description: Total discount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
      id:
        type: string
        description: Promotion unique idenfitcation number
      name?:
        type: string
        description: Promotion name
      type?:
        type: string
        description: Promotion type
  Seller:
    type: object
    properties:
      id?:
        type: string
        description: Seller unique Id in the Brand Lovers Marketplace
      name?:
        type: string
        description: Seller name in the Brand Lovers Marketplace
  SellerItem:
    type: object
    properties:
      attributes:
        type: array
        items:
          type: ProductAttribute
      brand:
        type: string
        description: Brand name
      dimensions:
        type: Dimensions
      giftWrap?:
        type: GiftWrap
      gtin?:
        type: array
        description: Array of product EAN and/or ISBN and/or ASIN codes
        items:
          type: string
      images:
        type: array
        description: List of valid Product image URLs.
        items:
          type: Image
      prices:
        type: array
        description: Price information for each marketplace that this product is listed
        items:
          type: ProductPrice
      product:
        type: ProductReference
      skuSellerId:
        type: string
        description: Unique Product Id (SKU) in the seller system
      status:
        type: array
        description: Product status for each marketplace that this product is listed
        items:
          type: SellerItemStatus
      stocks:
        type: array
        description: Invetory information for each marketplace that this product is listed
        items:
          type: ControlledStock
      title:
        type: string
        description: Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
      urls?:
        type: array
        description: List of URLs where the product is listed for sale
        items:
          type: ProductSiteReference
  SellerItemPrices:
    type: object
    properties:
      price:
        type: ProductPrice
      skuSellerId:
        type: string
        description: Unique product Id from seller that will be updated
  SellerItemStatus:
    type: object
    properties:
      active:
        type: boolean
        description: 'Defines if this product is ready for sale. Active `true`, disabled
          `false` '
    description: Seller SKU that will be enabled or disabled
  Shippment:
    type: object
    properties:
      courier:
        type: Courier
      cte?:
        type: string
        description: Conhecimento de Transporte EletrÃ´nico
      description?:
        type: string
        description: Additinal shipment tracking information
      id?:
        type: string
        description: Shipment Id associated with this shippment used to group diferent item or items from a single order
      invoice:
        type: Invoice
      items:
        type: array
        description: List of items of this shippment
        items:
          type: OrderItemReference
      number?:
        type: string
        description: Courier unique trackign Id associated with this shipment
      occurredAt:
        type: datetime
        description: Date time when this shippment happened
      sellerShipmentId:
        type: string
        description: Unique Seller shipment Id. This must be unique across all orders and shipments
      status:
        type: string
        description: Shipment status
      trackingUrl?:
        type: string
        description: Courier tracking URL
  Stock:
    type: object
    properties:
      crossDockingTime?:
        type: integer
        description: Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
      quantity:
        type: integer
        description: Stock available
    description: New product inventory information
  Ticket:
    type: object
    properties:
      closedAt?:
        type: datetime
        description: Date-time when ticket was closed
      createdAt?:
        type: datetime
        description: Date time that ticket was created
      customer?:
        type: CustomerReference
      description?:
        type: string
        description: Trouble ticked brief description
      metadata?:
        type: array
        items:
          type: Metadata
      priority?:
        type: string
        description: Trouble ticket priority
      sla?:
        type: datetime
        description: Date-time with a promisse for the customer when this ticket will be resolved
      status?:
        type: string
        description: Trouble Ticket status. 'OPEN','CLOSED','REOPENED'
      subject?:
        type: string
        description: Short one line title describing ticket.
      ticketId?:
        type: string
        description: Trouble Ticket unique identification Id
      type?:
        type: string
        description: Trouble ticket type.
      updatedAt?:
        type: datetime
        description: Date-time with last update of this ticket
  TicketMessage:
    type: object
    properties:
      body:
        type: string
        description: Message text
      createdAt:
        type: datetime
        description: Date created
      id:
        type: string
        description: Trouble Ticket Id.
      visibility:
        type: string
        description: Defines if this message is `CUSTOMER` (customer will receive a copy) or `INTERNAL`
  TicketStatus:
    type: object
    properties:
      ticketStatus:
        type: string
        description: New trouble ticket status. Valid options are `REOPENED`, `CLOSED`
    description: New trouble ticket status
/order:
  /{orderId}:
    uriParameters:
      orderId:
        type: string
        description: Unique Id of this order.
        displayName: orderId
    /shipment:
      /cancel:
        post:
          description: Confirm shipment canceletion (when requested by the customer) or failure to deliver one shipment
          displayName: Confirm shipment canceletion (when requested by the customer) or failure to deliver
          headers:
            authorization:
              type: string
              description: Authorization token. The Authorization token can be found in your Admin console.
              displayName: authorization
          body:
            application/json: NewTrackingRefund
          responses:
            200:
              description: success.
            400:
              description: Bad request.
            401:
              description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
            404:
              description: Object not found. Was not able to find orderId
      /delivered:
        post:
          description: Confirms that a shipment was delivered. Must inform quantity of successfully deliverd items even if items deliverd was less than the original order
          displayName: Confirms that a shipment was delivered
          headers:
            authorization:
              type: string
              description: Authorization token. The Authorization token can be found in your Admin console.
              displayName: authorization
          body:
            application/json: Newshipmentstatus
          responses:
            200:
              description: Sucess!
            400:
              description: Bad request.
            401:
              description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
            404:
              description: Object not found. Was not able to find orderId
      /exchange:
        post:
          description: This enpoint to confirm item exchange when failure to deliver or requested by the customer. All customer requests are tracket via trouble tickets
          displayName: Confirm item exchange
          headers:
            authorization:
              type: string
              description: Authorization token. The Authorization token can be found in your Admin console.
              displayName: authorization
          body:
            application/json: NewTrackingRefund
          responses:
            200:
              description: Sucess!
            400:
              description: Bad request.
            401:
              description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
            404:
              description: Object not found. Was not able to find orderId
      /return:
        post:
          description: Use this endpoint to return and refund items froma a order. In order to fully return an order list all items and applicate quantity.
          displayName: Confirm order item return and refund
          headers:
            authorization:
              type: string
              description: Authorization token. The Authorization token can be found in your Admin console.
              displayName: authorization
          body:
            application/json: NewTrackingRefund
          responses:
            200:
              description: Sucess!
            400:
              description: Bad request.
            401:
              description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
            404:
              description: Object not found. Was not able to find orderId
      /sent:
        post:
          description: Updates order to include shipment shiped information. This endpoint can be used to include a single or multiple shipments for any give order. In order to inform that all items of a order where shipped list all of them, including applicable quantities in the payload.
          displayName: Update new order to include shipment information
          headers:
            authorization:
              type: string
              description: Authorization token. The Authorization token can be found in your Admin console.
              displayName: authorization
          body:
            application/json: Newshipmentstatus
          responses:
            200:
              description: Sucess!
            400:
              description: Bad request.
            401:
              description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
            404:
              description: Object not found. Was not able to find orderId
    get:
      description: Returns all details of a single order, including last status, items shipped or not.
      displayName: Returns all details of a order
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      responses:
        200:
          description: Success!
          body:
            application/json:
              type: Order
        400:
          description: Bad request.
        401:
          description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
        403:
          description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
        404:
          description: Object not found. Was not able to find orderId
/orders:
  /shipments:
    /delivered:
      get:
        description: Returns list of shipments. By default this will return list of the last shipments ordered by dateCreated, folowed by last update date.
        displayName: Returns list of shipments
        queryParameters:
          status?:
            type: string
            description: Query by shippment status.
            displayName: status
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrdersShipments
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
      post:
        description: Bulk update of order shipments status. This alows to inform multiple shipments status
        displayName: Bulk update of order shipments
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        body:
          application/json: OrdersShipments
        responses:
          200:
            description: Success!
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /shipped:
      get:
        description: Returns a list of shipments shipped. By Default returns items ordered by dateCreated folowed by last update
        displayName: Returns a list of shipments shipped
        queryParameters:
          status?:
            type: string
            description: Product status.
            displayName: status
            enum:
            - NEW
            - APPROVED
            - DECLINED
            - PENDING
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrdersShipments
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
      post:
        description: Allows bulk updates of orders shippments.
        displayName: Bulk update of order shipments
        body:
          application/json: OrdersShipments
        responses:
          200:
            description: Success!
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
  /status:
    /approved:
      get:
        description: Returns a list of approved orders. Orders in the `approved` state must be fullfiled imediadetelly.
        displayName: Return list of approved orders
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 100, max 200. Use this in conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /canceled:
      get:
        description: Returns a list with canceled orders. Canceled orders should not be fullfiled.
        displayName: Returns lists of canceled orders
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Default 100, max 250. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
            default: 100
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /delivered:
      get:
        description: Returns a list of orders successfully delivered associated with this seller.
        displayName: Returns a list of orders successfully delivered associated with this seller.
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /new:
      get:
        description: Returns a list of orders flagged as new. New orders should not be fullfiled until marketplace flags them as approved.
        displayName: Returns a list of orders flagged as new.
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
            default: 100
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /partiallyDelivered:
      get:
        description: Returns a list of partially deliverd orders. This is a list of orders with items shipped but with not all items ackwlodged as deliverd
        displayName: Returns a list of partially deliverd orders
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
            default: 100
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /partiallySent:
      get:
        description: Returns a list of orders that contain one (or more) items that where not shipped. This will list the entire order as well the items with peding shipment. Use this service to track orders that need to be fullfiled.
        displayName: Returns a list of orders partially fullfiled
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 100. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    /sent:
      get:
        description: Returns a list with orders completely fullfiled, this means orders with all items sent. Orders will ordered by dateCreated fowllowed by last update
        displayName: Returns a list with orders fully sent
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetOrders
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
  get:
    description: Retuns a list of orders associated with this seller. The list is ordered by dateCreated.
    displayName: Returns orders details
    queryParameters:
      offset?:
        type: integer
        description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
        displayName: offset
      limit?:
        type: integer
        description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
        displayName: limit
    headers:
      authorization:
        type: string
        description: Authorization token. The Authorization token can be found in your Admin console.
        displayName: authorization
    responses:
      200:
        description: Success!
        body:
          application/json:
            type: GetOrders
      400:
        description: Bad request.
      401:
        description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
      403:
        description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
/product:
  /{skuSellerId}:
    uriParameters:
      skuSellerId:
        type: string
        description: SKU ID do Lojista.
        displayName: skuSellerId
    /prices:
      put:
        description: Allows seller to set the SKU prices (MSRP and/or offer price). All prices must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
        displayName: Allows seller to update prices of a single SKU
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        body:
          application/json: ProductPrice
        responses:
          200:
            description: Success!
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
    /status:
      put:
        description: Update product status in the Marketplace. Set to `true` to enable, `false` to disable sale.
        displayName: Enable/disable a single product in the Marketplace
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        body:
          application/json: SellerItemStatus
        responses:
          200:
            description: Success!
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
    /stock:
      put:
        description: Update a single product inventory information. Products with zero stock will not be eligible for sale.
        displayName: Update a single product stock
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        body:
          application/json: Stock
        responses:
          200:
            description: Success!
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
    get:
      description: Returns detailed information of a single product with the seller `skuSellerId`. This service will return a json document with product detail, status, price, invetory among other infomarion availble in the Brand Lovers marketplace
      displayName: Returns details of a single product using the seller `skuSellerId`
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      responses:
        200:
          description: Success!
          body:
            application/json:
              type: GetProduct
        401:
          description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
        403:
          description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
        404:
          description: Object not found. In general this means a invalid skuSellerId.
    put:
      description: Update a single product information such as name, brand, attribute, dimension, etc. Please note that data from your request will be merged with existing data. This allows you to easliy update only certain fields without the need to re-inform the other unchanged fields. For example in order to update just the field `title` simply send just this field with new information, remaining fields will not be changed. In order to erase an item the field must be informed as its default value, for example in order to erase the `videos` field must be sent as videos:[]. The `skuSellerId` field is always mandatory in the path and in the product json Object.
      displayName: Update product details
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      body:
        application/json: ProductUpdate
      responses:
        200:
          description: Success!
        400:
          description: Bad request.
        401:
          description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
        403:
          description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
        404:
          description: Object not found.
  post:
    description: Use this enpoint to create a single new product to the Marketplace. This enpoint expects a json document with one product. If you whant to upload multiple products in a single API call use POST /products method. The server will load each product as an individual item that can be manipulated using your own `skuSellerId`. This system is idenpontent, this means that once a `skuSellerId` is created it cannot be re-created using this tool. In order to update, edit a product use the PUT method with the correct reference to your `skuSellerId`
    displayName: Create a new product to the marketplace
    headers:
      authorization:
        type: string
        description: Authorization token. The Authorization token can be found in your Admin console.
        displayName: authorization
    body:
      application/json: Product
    responses:
      200:
        description: Sucess! Server received your request and will start background processing.
      400:
        description: Bad Request.
      401:
        description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
/products:
  /prices:
    put:
      description: Allows bulk update of product prices. This endpoint expects a json document with an array of products with the `skuSellerId` and the new price. Server will process each new product update individually and will ackwlodge as much updates as possible, even if a single product update fails. After this request you can query product final status with GET /product/status
      displayName: Allows bulk update of product prices.
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      body:
        application/json:
          type: array
          items:
            type: SellerItemPrices
          description: Data for bulk product price update
      responses:
        200:
          description: Success!
        400:
          description: Bad request.
        401:
          description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
  /status:
    /selling:
      get:
        description: Returns products that are successfully listed for sale.
        displayName: Returns products that are successfully listed for sale.
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetProductsStatusSelling
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    get:
      description: Returns a list with seller products status. Please note that this endpoint will not return all details of each product, just the skuSellerId and status. Also please note that this endpoint will return 250 products per call. For full details of a given procuct use GET /product/{skuSellerId}
      displayName: Returns seller products status in the marketplace
      queryParameters:
        offset?:
          type: integer
          description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
          displayName: offset
        limit?:
          type: integer
          description: Number of items to return in this query. Defaults to 250. Maximum 1000. Use this conjuction with `offset` to paginate across the results.
          displayName: limit
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      responses:
        200:
          description: Success fetching results.
          body:
            application/json:
              type: GetSellerProductsStatus
        403:
          description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
    put:
      description: Bulk enable/disable products in the marketplace. This endpoint requires an array of objects with the seller SKU `skuSellerId` and boolean value that defines if the product is enabled or not for sale. This endpoint can be used to set a single product or many products.
      displayName: Bulk enable/disable products in the marketplace
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      body:
        application/json:
          type: array
          items:
            type: ProductStatusUpdate
          description: List of seller products with new status information
      responses:
        200:
          description: Success!
        400:
          description: Bad request.
        401:
          description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
  /stocks:
    put:
      description: Bulk product stock update. This endpoint expect a array of products `skuSellerId` with new inventory data
      displayName: Bulk product stock update
      headers:
        authorization:
          type: string
          description: Authorization token. The Authorization token can be found in your Admin console.
          displayName: authorization
      body:
        application/json:
          type: array
          items:
            type: ProductStock
          description: Array of product SKUs.
      responses:
        200:
          description: Success!
        400:
          description: Bad request.
        401:
          description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
  get:
    description: Get a list of my products loaded into the Marketplace. This dosen't means that products are eligible for sale, just that they are loaded in the database.
    displayName: Returns a list of products loaded into BrandLovers Marketplace
    queryParameters:
      offset?:
        type: integer
        description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
        displayName: offset
      limit?:
        type: integer
        description: Number of items to retun. Defaults to 100. Max alowed is 200. Use this conjuction with `offset` to paginate across the results.
        displayName: limit
    headers:
      authorization:
        type: string
        description: Authorization token. The Authorization token can be found in your Admin console.
        displayName: authorization
    responses:
      200:
        description: Success!
        body:
          application/json:
            type: GetProductsResponse
      400:
        description: Bad request.
      401:
        description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
      403:
        description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
  post:
    description: This enpoint to creates new products in the Marketplace using `skuSellerId` as a primary key. This enpoint expects a json document with array of products. The server will load each product as an individual item that can be manipulated using your own `skuSellerId`. All requests to This endpoint are idenpontent with respect of the `skuSellerId`, this means that once a `skuSellerId` is created it cannot be re-created using this tool. In order to update use the PUT method with the correct `skuSellerId`. You can also use the POST /product to create a single product per request
    displayName: Allows new products from the seller to be loaded into the marketplace
    headers:
      authorization:
        type: string
        description: Authorization token. The Authorization token can be found in your Admin console.
        displayName: authorization
    body:
      application/json:
        type: array
        items:
          type: Product
        description: JSON with a list of new products to be updloaded to the platform
    responses:
      200:
        description: Sucess! Server received your request and will start background processing.
      400:
        description: Bad Request.
      401:
        description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
/ticket:
  /{ticketId}:
    uriParameters:
      ticketId:
        type: string
        description: Trouble ticket ID.
        displayName: ticketId
    /message:
      post:
        description: Add a new message to this trouble ticket. Messages can be `CUSTOMER` (customer will be able to see it) or `INTERNAL`.
        displayName: Add new message to trouble ticket
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        body:
          application/json: NewTicketMessage
        responses:
          200:
            description: Success!
          400:
            description: Bad request.
          404:
            description: Object not found.
    /messages:
      get:
        description: Returns trouble ticket history with all messages exchanged. Only tickets related to your seller will be returned. Attempt to read other tickets will return 403 (acess denied).
        displayName: Get trouble ticket messages
        queryParameters:
          offset?:
            type: integer
            description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
            displayName: offset
          limit?:
            type: integer
            description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
            displayName: limit
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        responses:
          200:
            description: Success!
            body:
              application/json:
                type: GetTicketMessages
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Access denied. You can only access your trouble tickets
    /status:
      put:
        description: Alows the seller to update the status of a trouble ticket
        displayName: Update trouble ticket status
        headers:
          authorization:
            type: string
            description: Authorization token. The Authorization token can be found in your Admin console.
            displayName: authorization
        body:
          application/json: TicketStatus
        responses:
          200:
            description: successfully received transaction
          400:
            description: Bad request.
          401:
            description: Access denied. You're not authenticated or token expired. Check your request header the `authorization` field is required.
          403:
            description: Server refused to process your request. Please check the API SLA and reduce number of requests per second.
          404:
            description: Object not found.
  post:
    description: Use this service to create a new trouble ticket. Use this to include relevant information about the order, comunicate with the customer or marketplace team. Whenever possible message will be pushed to Mobile first. This is the primary mean of comunicaiton with the customer regarding orders, shippments, shippments status. New tickets will be automatically be set to 'OPEN'. Trouble tickets need to be associated with a orderId or customer. New tickets can optionally include a new message.
    displayName: Creates a new trouble ticket
    headers:
      authorization:
        type: string
        description: Authorization token. The Authorization token can be found in your Admin console.
        displayName: authorization
    body:
      application/json: NewTicket
    responses:
      200:
        description: Success!
      400:
        description: Bad request.
/tickets:
  get:
    description: Allows seller to receive and status, queries, requests and complaints from customers. As well related messages
    displayName: Get customers trouble tickets
    queryParameters:
      status?:
        type: string
        description: Query by trouble ticket status
        displayName: status
        enum:
        - OPEN
        - REOPENED
        - CLOSED
      offset?:
        type: integer
        description: Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
        displayName: offset
      limit?:
        type: integer
        description: Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
        displayName: limit
    headers:
      authorization:
        type: string
        description: Authorization token. The Authorization token can be found in your Admin console.
        displayName: authorization
    responses:
      200:
        description: Success!
        body:
          application/json:
            type: GetTickets
      400:
        description: Bad request.
