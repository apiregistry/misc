#%RAML 1.0
title: VersionEye
version: v2
baseUri: www.versioneye.com/api
description: VersionEye is a cross-platform search engine for free/libre/open source software libraries.
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
/v2:
  /github:
    /hook:
      /{project_id}:
        uriParameters:
          project_id:
            type: string
            description: Project ID
            displayName: project_id
        post:
          description: |
            <p>This endpoint is registered as service hook on GitHub. It triggers a project re-parse on each git push.</p>
          displayName: github service hook
          responses:
            200:
              description: No response was specified
    /sync:
      get:
        description: |2+

          <p>Reimports ALL GitHub Repositories. This Endpoint fetches meta information to all
          repositories in your GitHub account. Meta information such as repo name, branches and
          supported project files.</p>

          <p>This endpoint works asynchronously and returns a status code. The status code is either
          <strong>running</strong> or <strong>done</strong>.</p>

        displayName: re-load github data
        responses:
          200:
            description: No response was specified
    /{repo_key}:
      uriParameters:
        repo_key:
          type: string
          description: encoded repo name with optional branch info.
          displayName: repo_key
      get:
        description: |2+

          <p>This Endpoint returns detailed information about a GitHub repository.</p>

          <p>Due the limits of our current API framework, the repo key has to be
          encoded as url-safe string. That means all â/â has to be replaced with
          colons â:â and â.â has to be replaced with â~â.</p>

          <p>For example,  repository with fullname <code>versioneye/veye</code> has to transformed
          to <code>versioneye:veye</code>.</p>

        displayName: shows the detailed information for the repository
        responses:
          200:
            description: No response was specified
      delete:
        description: |2+

          <p>This Endpoint deletes a project on VersionEye!</p>

          <p>Due the limits of our current API framework, the repo key has to be
          encoded as url-safe string. That means all â/â has to be replaced with
          colons â:â and â.â has to be replaced with â~â.</p>

          <p>For example,  repository with fullname <code>versioneye/veye</code> has to transformed
          to <code>versioneye:veye</code>.</p>

        displayName: remove imported project
        queryParameters:
          branch?:
            type: string
            description: the name of the branch
            displayName: branch
        responses:
          200:
            description: No response was specified
      post:
        description: |2+

          <p>Use this Endpoint to import a project file from GitHub. This will create a new project on VersionEye.</p>

          <p>Due the limits of our current API framework, the repo key has to be
          encoded as url-safe string. That means all â/â has to be replaced with
          colons â:â and â.â has to be replaced with â~â.</p>

          <p>For example,  repository with fullname <code>versioneye/veye</code> has to transformed
          to <code>versioneye:veye</code>.</p>

        displayName: imports project file from github
        responses:
          200:
            description: No response was specified
    get:
      description: |2+

        <p>This endpoint shows all imported repositories from your Github account.</p>

        <p>This enpoint expects that you have a GitHub account connected and the token
        is still valid. If that is not the case please visit <strong>https://www.versioneye.com/settings/connect</strong>.
        to update your GitHub credentials.</p>

        <p>If it shows no or old data, then you can use the <code>github/sync</code> endpoint
        to update your account with the current meta data from GitHub.</p>

      displayName: lists your's github repos
      queryParameters:
        lang?:
          type: string
          description: Filter by language
          displayName: lang
        private?:
          type: boolean
          description: Filter by visibility
          displayName: private
        org_name?:
          type: string
          description: Filter by name of organization
          displayName: org_name
        org_type?:
          type: string
          description: Filter by type of organization
          displayName: org_type
        page?:
          type: string
          description: Number of page
          displayName: page
        only_imported?:
          type: boolean
          description: Show only imported repositories
          displayName: only_imported
      responses:
        200:
          description: No response was specified
  /me:
    /comments:
      get:
        displayName: shows comments of authorized user
        queryParameters:
          page?:
            type: integer
            description: page number for pagination
            displayName: page
        responses:
          200:
            description: No response was specified
    /favorites:
      get:
        displayName: shows the packages you are following
        queryParameters:
          page?:
            type: integer
            description: page number for pagination
            displayName: page
        responses:
          200:
            description: No response was specified
    /notifications:
      get:
        description: |2+

          <p>This Endpoint returns the 30 latest notifications.</p>

          <p>If there are new versions out there for software packages you follow directly on VersionEye, then
          each new version is a new <strong>notification</strong> for your account.</p>

        displayName: shows unread notifications of authorized user
        responses:
          200:
            description: No response was specified
    get:
      description: |2+

        <p>On Swagger, you can create session by adding additional parameter :api_key.</p>

      displayName: shows profile of authorized user
      responses:
        200:
          description: No response was specified
  /organisations:
    /{orga_name}:
      uriParameters:
        orga_name:
          type: string
          displayName: orga_name
      /inventory:
        get:
          description: |2+

            <p>Find a detailed description here: https://github.com/versioneye/versioneye-api/blob/master/docs/api/v2/organisation.md</p>

          displayName: Returns the inventory list of the organisation
          queryParameters:
            team_name?:
              type: string
              description: Filter by team name
              displayName: team_name
            language?:
              type: string
              description: Filter by programming language
              displayName: language
            project_version?:
              type: string
              description: Filter down by project version
              displayName: project_version
            post_filter?:
              type: string
              description: Post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'
              displayName: post_filter
          responses:
            200:
              description: No response was specified
  /products:
    /search:
      /{q}:
        uriParameters:
          q:
            type: string
            description: Query string. At least 2 characters.
            displayName: q
        get:
          description: |2+

            <p>This resource returns same results as our web application. But you get it as JSON objects -
            the result is an JSON array of product objects.</p>

            <p>When thereâs no match for the query, the result array will be empty.</p>

          displayName: search packages
          queryParameters:
            lang?:
              type: string
              description: "Filter results by programming languages;\n           \
                \                       For filtering multiple languages submit a\
                \ comma separated list of language strings.\n                    \
                \            "
              displayName: lang
            g?:
              type: string
              description: Filter by GroupID. This is Java/Maven specific
              displayName: g
            page?:
              type: integer
              description: Specify page for paging
              displayName: page
          responses:
            200:
              description: No response was specified
    /{lang}:
      uriParameters:
        lang:
          type: string
          description: '"Name of programming language"'
          displayName: lang
      /{prod_key}:
        uriParameters:
          prod_key:
            type: string
            description: '"Encoded product key, replace all `/` and `.`'
            displayName: prod_key
        /follow:
          get:
            description: |2+

              <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

              <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

              <h4 id="notes-about-status-codes">Notes about status codes</h4>

              <p>This resource will returns the status code 404 if there is no product
              for the given prod_key.</p>

            displayName: check your following status
            responses:
              200:
                description: No response was specified
          delete:
            description: |2+

              <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

              <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

              <h4 id="response-codes">Response codes</h4>

              <ul>
                <li>400 - bad request; you used wrong product key;</li>
                <li>401 - unauthorized - please append api_key</li>
                <li>403 - forbidden; you are not authorized; or just missed api_key;</li>
              </ul>

            displayName: unfollow given software package
            responses:
              200:
                description: No response was specified
          post:
            description: |2+

              <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

              <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

              <h4 id="notes-about-status-codes">Notes about status codes</h4>

              <p>It will respond 404, when you are using wrong product key or encode it uncorrectly.</p>

            displayName: follow your favorite software package
            responses:
              200:
                description: No response was specified
        /references:
          get:
            description: |2+

              <p>It returns the references of a package.</p>

              <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

              <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

              <h4 id="notes-about-status-codes">Notes about status codes</h4>

              <p>This resource will return the status code 404 if there is no product for
              the given prod_key or the product has 0 references.</p>

            displayName: references
            queryParameters:
              page?:
                type: integer
                description: Page for paging
                displayName: page
            responses:
              200:
                description: No response was specified
        /versions:
          get:
            description: |2+

              <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

              <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

              <h4 id="notes-about-status-codes">Notes about status codes</h4>

              <ul>
                <li>
                  <p>API returns 404, when the product with given product key doesnt exists.</p>
                </li>
                <li>
                  <p>Response 302 means that you didnt encode prod_key correctly.* (Replace all dots &amp; slashes ) *</p>
                </li>
              </ul>

            displayName: list versions of a package
            responses:
              200:
                description: No response was specified
        /{prod_version}:
          uriParameters:
            prod_version:
              type: string
              description: ' product version '
              displayName: prod_version
          /scm_changes:
            post:
              description: |2+

                <p>This resource can parse a changelog.xml from the maven-changelog-plugin, assign
                it to a specific artifact and display the changelog infos on the product page.</p>

                <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

                <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

                <h4 id="notes-about-status-codes">Notes about status codes</h4>

                <p>It will respond 404, when you are using wrong product key or encode it uncorrectly.</p>

              displayName: upload scm changelogs to an artifact
              responses:
                200:
                  description: No response was specified
        get:
          description: |2+

            <p>Please replace all slashes <code>/</code> through colons <code>:</code> and all dots <code>.</code> through <code>~</code>!</p>

            <p>Example: The clojure package <code>yummy.json/json</code> has to be transformed to  <code>yummy~json:json</code>.</p>

            <h4 id="notes-about-status-codes">Notes about status codes</h4>

            <ul>
              <li>
                <p>API returns 404, when the product with given product key doesnt exists.</p>
              </li>
              <li>
                <p>Response 302 means that you didnt encode prod_key correctly.* (Replace all dots &amp; slashes ) *</p>
              </li>
            </ul>

          displayName: detailed information for specific package
          queryParameters:
            prod_version?:
              type: string
              description: '"Version string"'
              displayName: prod_version
          responses:
            200:
              description: No response was specified
  /projects:
    /{group_id}:
      uriParameters:
        group_id:
          type: string
          description: GroupId of the parent project
          displayName: group_id
      /{artifact_id}:
        uriParameters:
          artifact_id:
            type: string
            description: ArtifactId of the parent project
            displayName: artifact_id
        /merge_ga:
          /{child_id}:
            uriParameters:
              child_id:
                type: string
                description: Project ID of the child
                displayName: child_id
            get:
              description: |2+

                <p>This endpoint merges a project (child_id) into another project (group_id/artifact_id).
                This endpoint is specially for Maven based projects!
                To use this resource you need either an active session or you have to append
                your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

              displayName: merge a project into another one
              responses:
                200:
                  description: No response was specified
    /{parent_id}:
      uriParameters:
        parent_id:
          type: string
          description: Project ID of the parent
          displayName: parent_id
      /merge:
        /{child_id}:
          uriParameters:
            child_id:
              type: string
              description: Project ID of the child
              displayName: child_id
          get:
            description: |2+

              <p>This endpoint merges a project (child_id) into another project (parent_id).
              To use this resource you need either an active session or you have to append
              your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

            displayName: merge a project into another one
            responses:
              200:
                description: No response was specified
      /unmerge:
        /{child_id}:
          uriParameters:
            child_id:
              type: string
              description: Project ID of the child
              displayName: child_id
          get:
            description: |2+

              <p>This endpoint unmerges a project (child_id) from another project (parent_id). It makes the
              chilld again a separate project!
              To use this resource you need either an active session or you have to append
              your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

            displayName: unmerge a project
            responses:
              200:
                description: No response was specified
    /{project_key}:
      uriParameters:
        project_key:
          type: string
          description: Project ID
          displayName: project_key
      /licenses:
        get:
          description: |2+

            <p>To use this resource you need either an active session or you have to append
            your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

          displayName: get grouped view of licences for dependencies
          responses:
            200:
              description: No response was specified
      get:
        description: |
          <p>It shows detailed info of your project.</p>
        displayName: shows the project's information
        responses:
          200:
            description: No response was specified
      delete:
        description: |2+

          <p>To use this resource you need either an active session or you have to append
          your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

        displayName: delete given project
        responses:
          200:
            description: No response was specified
      post:
        description: |2+

          <p>To use this resource you need either an active session or you have to append
          your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

        displayName: update project with new file
        responses:
          200:
            description: No response was specified
    get:
      description: |2+

        <p>To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

      displayName: list of projects
      queryParameters:
        orga_name?:
          type: string
          description: The name of the organisation the project is assigned to.
          displayName: orga_name
        team_name?:
          type: string
          description: The name of the team in the organisation this project is assigned to.
          displayName: team_name
      responses:
        200:
          description: No response was specified
    post:
      description: |2+

        <p>To use this resource you need either an active session or you have to append
        your API Key to the URL as parameter. For example: â?api_key=666_your_api_key_666â</p>

      displayName: upload project file and create a new project
      responses:
        200:
          description: No response was specified
  /security:
    get:
      displayName: Security Vulnerabilities
      queryParameters:
        language:
          type: string
          description: Filter by programming languages
          displayName: language
        prod_key?:
          type: string
          description: prod_key of the package
          displayName: prod_key
        page?:
          type: integer
          description: Specify page for paging
          displayName: page
        asc_sort?:
          type: string
          description: Asc sort by value
          displayName: asc_sort
        desc_sort?:
          type: string
          description: Desc sort by value
          displayName: desc_sort
      responses:
        200:
          description: No response was specified
  /services:
    /ping:
      get:
        displayName: Answers to request with basic pong.
        responses:
          200:
            description: No response was specified
  /sessions:
    get:
      description: |+
        <p>If current user has active session, then this
                        method will return 200 with short user profile.
                        For othercase, it will return error message with status code 401.</p>

      displayName: returns session info for authorized users
      responses:
        200:
          description: No response was specified
    delete:
      description: |
        <p>Close current session. Itâs very handy method when you re-generated
                          your current API-key.</p>
      displayName: delete current session aka log out.
      responses:
        200:
          description: No response was specified
    post:
      description: |
        <p>You need to append your api_key to request.</p>
      displayName: creates new sessions
      responses:
        200:
          description: No response was specified
  /users:
    /{username}:
      uriParameters:
        username:
          type: string
          description: username
          displayName: username
      /comments:
        get:
          displayName: shows user's comments
          queryParameters:
            page?:
              type: integer
              description: pagination number
              displayName: page
          responses:
            200:
              description: No response was specified
      /favorites:
        get:
          displayName: shows user's favorite packages
          queryParameters:
            page?:
              type: integer
              description: Pagination number
              displayName: page
          responses:
            200:
              description: No response was specified
      get:
        displayName: shows profile of given user_id
        responses:
          200:
            description: No response was specified
