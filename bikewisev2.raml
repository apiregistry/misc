#%RAML 1.0
title: BikeWise API v2
version: v2
baseUri: bikewise.org/api
description: |
  <p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href="https://github.com/bikeindex/bikewise">GitHub</a>.</p>
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
/v2:
  /incidents:
    /{id}:
      uriParameters:
        id:
          type: integer
          description: |
            <p>Incident ID</p>
          displayName: id
          format: int32
      get:
        responses:
          200:
            description: No response was specified
    get:
      description: |2

        <p>If you창d like more detailed information about bike incidents, use this endpoint. For mapping, <code>locations</code> is probably a better bet.</p>

        <p><strong>Notes on location searching</strong>: <br />
        - <code>proximity</code> accepts an ip address, an address, zipcode, city, or latitude,longitude - i.e. <code>70.210.133.87</code>, <code>210 NW 11th Ave, Portland, OR</code>, <code>60647</code>, <code>Chicago, IL</code>, and <code>45.521728,-122.67326</code> are all acceptable<br />
        - <code>proximity_square</code> sets the length of the sides of the square to find matches inside of. The square is centered on the location specified by <code>proximity</code>. It defaults to 100.</p>
      displayName: Paginated incidents matching parameters
      queryParameters:
        page?:
          type: integer
          description: |
            <p>Page of results to fetch.</p>
          displayName: page
          default: 1
          format: int32
        per_page?:
          type: integer
          description: |
            <p>Number of results to return per page.</p>
          displayName: per_page
          format: int32
        occurred_before?:
          type: integer
          description: |
            <p>End of period</p>
          displayName: occurred_before
          format: int32
        occurred_after?:
          type: integer
          description: |
            <p>Start of period</p>
          displayName: occurred_after
          format: int32
        incident_type?:
          type: string
          description: |
            <p>Only incidents of specific type</p>
          displayName: incident_type
          enum:
          - crash
          - hazard
          - theft
          - unconfirmed
          - infrastructure_issue
          - chop_shop
        proximity?:
          type: string
          description: |
            <p>Center of location for proximity search</p>
          displayName: proximity
        proximity_square?:
          type: integer
          description: |
            <p>Size of the proximity search</p>
          displayName: proximity_square
          default: 100
          format: int32
        query?:
          type: string
          description: |
            <p>Full text search of incidents</p>
          displayName: query
      responses:
        200:
          description: No response was specified
  /locations:
    /markers:
      get:
        description: |
          <p>This behaves exactly like the root <code>locations</code> endpoint, but returns <a href="https://github.com/mapbox/simplestyle-spec">simplestyled markers</a> (<a href="https://www.mapbox.com/guides/markers/#simple-style">mapbox styled markers</a>)</p>

          <p><strong>Go forth and make maps!</strong></p>
        displayName: Unpaginated geojson response with simplestyled markers
        queryParameters:
          occurred_before?:
            type: integer
            description: |
              <p>End of period</p>
            displayName: occurred_before
            format: int32
          occurred_after?:
            type: integer
            description: |
              <p>Start of period</p>
            displayName: occurred_after
            format: int32
          incident_type?:
            type: string
            description: |
              <p>Only incidents of specific type</p>
            displayName: incident_type
            enum:
            - crash
            - hazard
            - theft
            - unconfirmed
            - infrastructure_issue
            - chop_shop
          proximity?:
            type: string
            description: |
              <p>Center of location for proximity search</p>
            displayName: proximity
          proximity_square?:
            type: integer
            description: |
              <p>Size of the proximity search</p>
            displayName: proximity_square
            default: 100
            format: int32
          query?:
            type: string
            description: |
              <p>Full text search of incidents</p>
            displayName: query
          limit?:
            type: integer
            description: |
              <p>Max number of results to return. Defaults to 100</p>
            displayName: limit
            format: int32
          all?:
            type: boolean
            description: |
              <p>Give 창em all to me. Will ignore limit</p>
            displayName: all
        responses:
          200:
            description: No response was specified
    get:
      description: |
        <p><strong>This endpoint behaves exactly like</strong> <code>incidents</code>, but returns a valid geojson <code>FeatureCollection</code> that looks like this:</p>

        <pre><code>{
          type: "FeatureCollection",
          features: [
            {
              type: "Feature",
              properties: {
              id: 4474199,
              type: "Theft",
              occurred_at: 1428536937
            },
              geometry: {
              type: "Point",
              coordinates: [ -122.6244177, 45.5164386 ]
            }
          }
        }
        </code></pre>

        <p>It doesn창t paginate. If you pass the <code>all</code> parameter it returns all matches (which can be big, &gt; 4mb), otherwise it returns the 100 most recent.</p>

        <p><strong>Go forth and make maps!</strong></p>
      displayName: Unpaginated geojson response
      queryParameters:
        occurred_before?:
          type: integer
          description: |
            <p>End of period</p>
          displayName: occurred_before
          format: int32
        occurred_after?:
          type: integer
          description: |
            <p>Start of period</p>
          displayName: occurred_after
          format: int32
        incident_type?:
          type: string
          description: |
            <p>Only incidents of specific type</p>
          displayName: incident_type
          enum:
          - crash
          - hazard
          - theft
          - unconfirmed
          - infrastructure_issue
          - chop_shop
        proximity?:
          type: string
          description: |
            <p>Center of location for proximity search</p>
          displayName: proximity
        proximity_square?:
          type: integer
          description: |
            <p>Size of the proximity search</p>
          displayName: proximity_square
          default: 100
          format: int32
        query?:
          type: string
          description: |
            <p>Full text search of incidents</p>
          displayName: query
        limit?:
          type: integer
          description: |
            <p>Max number of results to return. Defaults to 100</p>
          displayName: limit
          format: int32
        all?:
          type: boolean
          description: |
            <p>Give 창em all to me. Will ignore limit</p>
          displayName: all
      responses:
        200:
          description: No response was specified
