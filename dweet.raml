#%RAML 1.0
title: dweet.io
version: '2.0'
baseUri: dweet.io/
description: Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
/alert:
  /{who}:
    uriParameters:
      who:
        type: string
        description: A comma separated list of Email addresses to send the alert to.
        displayName: who
    /when:
      /{thing}:
        uriParameters:
          thing:
            type: string
            description: A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions.
            displayName: thing
        /{condition}:
          uriParameters:
            condition:
              type: string
              description: A condition that returns a string or a true value if a condition is met.
              displayName: condition
          get:
            displayName: Create an alert for a thing. A thing must be locked before an alert can be set.
            queryParameters:
              key:
                type: string
                description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
                displayName: key
            responses:
              200:
                description: No response was specified
/dweet:
  /for:
    /{thing}:
      uriParameters:
        thing:
          type: string
          description: A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions.
          displayName: thing
      post:
        displayName: Create a dweet for a thing.
        queryParameters:
          key?:
            type: string
            description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
            displayName: key
        responses:
          200:
            description: No response was specified
  /quietly:
    /for:
      /{thing}:
        uriParameters:
          thing:
            type: string
            description: A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions.
            displayName: thing
        post:
          displayName: Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response.
          queryParameters:
            key?:
              type: string
              description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
              displayName: key
          responses:
            200:
              description: No response was specified
/get:
  /alert:
    /for:
      /{thing}:
        uriParameters:
          thing:
            type: string
            description: A unique name of a thing.
            displayName: thing
        get:
          displayName: Get the alert attached to a thing.
          queryParameters:
            key:
              type: string
              description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
              displayName: key
          responses:
            200:
              description: No response was specified
  /dweets:
    /for:
      /{thing}:
        uriParameters:
          thing:
            type: string
            description: A unique name of a thing.
            displayName: thing
        get:
          displayName: Read the last 5 cached dweets for a thing.
          queryParameters:
            key?:
              type: string
              description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
              displayName: key
          responses:
            200:
              description: No response was specified
  /latest:
    /dweet:
      /for:
        /{thing}:
          uriParameters:
            thing:
              type: string
              description: A unique name of a thing.
              displayName: thing
          get:
            displayName: Read the latest dweet for a thing.
            queryParameters:
              key?:
                type: string
                description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
                displayName: key
            responses:
              200:
                description: No response was specified
  /stored:
    /alerts:
      /for:
        /{thing}:
          uriParameters:
            thing:
              type: string
              description: A unique name of a thing.
              displayName: thing
          get:
            displayName: Read all the saved alerts for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
            queryParameters:
              key:
                type: string
                description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
                displayName: key
              date:
                type: string
                description: The calendar date (YYYY-MM-DD) from which you'd like to start your query.  The response will be a maximum of one day.
                displayName: date
              hour?:
                type: string
                description: The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour.
                displayName: hour
              responseType?:
                type: string
                description: Current valid parameters for this are 'csv' and 'json'.  If this parameter is left blank, all responses default to hapi-json dweet-speak.
                displayName: responseType
            responses:
              200:
                description: No response was specified
    /dweets:
      /for:
        /{thing}:
          uriParameters:
            thing:
              type: string
              description: A unique name of a thing.
              displayName: thing
          get:
            displayName: Read all the saved dweets for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
            queryParameters:
              key:
                type: string
                description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
                displayName: key
              date:
                type: string
                description: The calendar date (YYYY-MM-DD) from which you'd like to start your query.  The response will be a maximum of one day.
                displayName: date
              hour?:
                type: string
                description: The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour.
                displayName: hour
              responseType?:
                type: string
                description: Current valid parameters for this are 'csv' and 'json'.  If this parameter is left blank, all responses default to hapi-json dweet-speak.
                displayName: responseType
            responses:
              200:
                description: No response was specified
/listen:
  /for:
    /dweets:
      /from:
        /{thing}:
          uriParameters:
            thing:
              type: string
              displayName: thing
          get:
            description: 'Sorry, this function uses HTTP chunked responses and cannot
              be tested here. Try something like: <pre>curl --raw https://dweet.io/listen/for/dweets/from/{thing}</pre>'
            displayName: Listen for dweets from a thing.
            responses:
              200:
                description: No response was specified
/lock:
  /{thing}:
    uriParameters:
      thing:
        type: string
        description: A unique name of a thing.
        displayName: thing
    get:
      displayName: Reserve and lock a thing.
      queryParameters:
        lock:
          type: string
          description: A valid dweet.io lock.
          displayName: lock
        key:
          type: string
          description: A valid dweet.io master key.
          displayName: key
      responses:
        200:
          description: No response was specified
/remove:
  /alert:
    /for:
      /{thing}:
        uriParameters:
          thing:
            type: string
            description: A unique name of a thing.
            displayName: thing
        get:
          displayName: Remove an alert for a thing.
          queryParameters:
            key:
              type: string
              description: A valid key for a locked thing. If the thing is not locked, this can be ignored.
              displayName: key
          responses:
            200:
              description: No response was specified
  /lock:
    /{lock}:
      uriParameters:
        lock:
          type: string
          description: A valid dweet.io lock.
          displayName: lock
      get:
        displayName: Remove a lock from thing.
        queryParameters:
          key:
            type: string
            description: A valid dweet.io master key.
            displayName: key
        responses:
          200:
            description: No response was specified
/unlock:
  /{thing}:
    uriParameters:
      thing:
        type: string
        description: A unique name of a thing.
        displayName: thing
    get:
      displayName: Unlock a thing.
      queryParameters:
        key:
          type: string
          description: A valid dweet.io master key.
          displayName: key
      responses:
        200:
          description: No response was specified
