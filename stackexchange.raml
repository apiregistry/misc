#%RAML 1.0
title: StackExchange
version: '2.0'
baseUri: api.stackexchange.com/2.0
description: |
  Stack Exchange is a network of 130+ Q&A communities including Stack Overflow.
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
securitySchemes:
  oauth_2_0:
    type: OAuth 2.0
    description: |
      The Stack Exchange API offers user authentication via OAuth 2.0, specifically templated after Facebook's implementation. There are two flows, an explicit grant for server side applications and an implicit one for pure browser based ones.

      #The explicit OAuth 2.0 flow consists of the following steps:
      1. Send a user to https://stackexchange.com/oauth, with these query string parameters
      - client_id
      - scope
      - redirect_uri - must be under an apps registered domain
      - state - optional
      2. The user approves your app
      3. The user is redirected to redirect_uri, with these query string parameters
      - code
      - state - optional, only returned if provided in the first step
      4. POST (application/x-www-form-urlencoded) the following parameters to https://stackexchange.com/oauth/access_token
      - client_id
      - client_secret
      - code - from the previous step
      - redirect_uri - must be the same as the provided in the first step
      This request is responded to with either an error (HTTP status code 400) or an access token of the form access_token=...&expires=1234. expires will only be set if scope does not include no_expiry, the use of which is strongly advised against unless your app truly needs perpetual access.

      #The implicit OAuth 2.0 flow consists of the following steps:

      1. Open a new window at https://stackexchange.com/oauth/dialog, with these query string parameters
      - client_id
      - scope (details)
      - redirect_uri - must be under an apps registered domain
      - state - optional
      2. The user approves your app
      3. The user is redirected to redirect_uri, with these parameters in the hash
      - access_token
      - expires - optional, only if scope doesn't contain no_expiry
      The explicit flow should be used by server-side applications, with special care taken to never leak client_secret. Client side applications should use the implicit flow.

      Once you have authenticated a user once, regardless of flow, subsequent re-authorizations will occur without requiring user action. Naturally, should a user revoke an applications permissions then further action will be required to re-authorize.

      Applications using the implicit flow can make use of our provided minimalistic Javascript SDK.

      #Scope

      With an empty scope, authentication will only allow an application to identify a user via the /me method. In order to access other information, different scope values must be sent. Multiple values may be sent in scope by comma or space delimitting them.

      - read_inbox - access a user's global inbox
      - no_expiry - access_token's with this scope do not expire
      - write_access - perform write operations as a user 2.1
      - private_info - access full history of a user's private actions on the site 2.1

      #Desktop Applications

      Desktop applications cannot participate directly in OAuth 2.0 flows, however the embeddable browser controls available in most frameworks make it possible to work around this limitation.

      Desktop applications should use the implicit client-side flow, hosting the process within a browser control. For redirect_uri, a value of https://stackexchange.com/oauth/login_success should be used. Upon a successful authentication, access_token will be placed in the url hash as with a standard implicit authentication.

      #Usage

      Access tokens can be passed (as access_token) to any method to grant applications an increased throttle quota. When passing an access token an app must pass its request key as well, if you don't have a request key you can obtain one by registering your application on Stack Apps (http://stackapps.com/users/login?returnurl=/apps/oauth/register).
    settings:
      authorizationGrants:
      - implicit
      authorizationUri: https://stackexchange.com/oauth
      accessTokenUri: https://stackexchange.com/oauth
      scopes: []
types:
  access_tokens:
    type: array
    items:
      type: object
      properties:
        access_token?:
          type: string
        account_id?:
          type: integer
        scope?:
          type: array
        expires_on_date?:
          type: integer
  account_merge:
    type: array
    items:
      type: object
      properties:
        new_account_id?:
          type: integer
        old_account_id?:
          type: integer
        merge_date?:
          type: integer
  answers:
    type: array
    items:
      type: object
      properties:
        comment_count?:
          type: integer
        link?:
          type: string
        locked_date?:
          type: integer
        can_flag?:
          type: boolean
        body?:
          type: string
        title?:
          type: string
        answer_id?:
          type: integer
        community_owned_date?:
          type: integer
        score?:
          type: integer
        downvoted?:
          type: boolean
        down_vote_count?:
          type: integer
        awarded_bounty_amount?:
          type: integer
        owner?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        is_accepted?:
          type: boolean
        comments?:
          type: array
        last_editor?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        awarded_bounty_users?:
          type: array
        accepted?:
          type: boolean
        last_activity_date?:
          type: integer
        creation_date?:
          type: integer
        question_id?:
          type: integer
        tags?:
          type: array
        share_link?:
          type: string
        body_markdown?:
          type: string
        upvoted?:
          type: boolean
        up_vote_count?:
          type: integer
        last_edit_date?:
          type: integer
  badges:
    type: array
    items:
      type: object
      properties:
        badge_id?:
          type: integer
        link?:
          type: string
        name?:
          type: string
        description?:
          type: string
        rank?:
          type: string
        badge_type?:
          type: string
        user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        award_count?:
          type: integer
  comments:
    type: array
    items:
      type: object
      properties:
        owner?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        edited?:
          type: boolean
        link?:
          type: string
        can_flag?:
          type: boolean
        creation_date?:
          type: integer
        body?:
          type: string
        comment_id?:
          type: integer
        score?:
          type: integer
        body_markdown?:
          type: string
        post_id?:
          type: integer
        reply_to_user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        upvoted?:
          type: boolean
        post_type?:
          type: string
  errors:
    type: array
    items:
      type: object
      properties:
        error_name?:
          type: string
        error_id?:
          type: integer
        description?:
          type: string
  events:
    type: array
    items:
      type: object
      properties:
        event_type?:
          type: string
        the id of the object (answer, comment, question, or user) the event describes?:
          type: integer
        link?:
          type: string
        creation_date?:
          type: integer
        excerpt?:
          type: string
  filters:
    type: array
    items:
      type: object
      properties:
        filter?:
          type: string
        filter_type?:
          type: string
        included_fields?:
          type: array
  inbox_items:
    type: array
    items:
      type: object
      properties:
        site?:
          type: object
          properties:
            icon_url?:
              type: string
            audience?:
              type: string
            aliases?:
              type: array
            favicon_url?:
              type: string
            site_type?:
              type: string
            logo_url?:
              type: string
            api_site_parameter?:
              type: string
            open_beta_date?:
              type: integer
            site_state?:
              type: string
            related_sites?:
              type: array
            closed_beta_date?:
              type: integer
            markdown_extensions?:
              type: array
            site_url?:
              type: string
            styling?:
              type: object
              properties:
                tag_background_color?:
                  type: string
                link_color?:
                  type: string
                tag_foreground_color?:
                  type: string
            name?:
              type: string
            high_resolution_icon_url?:
              type: string
            twitter_account?:
              type: string
            launch_date?:
              type: integer
        item_type?:
          type: string
        is_unread?:
          type: boolean
        link?:
          type: string
        creation_date?:
          type: integer
        body?:
          type: string
        comment_id?:
          type: integer
        title?:
          type: string
        answer_id?:
          type: integer
        question_id?:
          type: integer
  network_users:
    type: array
    items:
      type: object
      properties:
        last_access_date?:
          type: integer
        reputation?:
          type: integer
        badge_counts?:
          type: object
          properties:
            gold?:
              type: integer
            silver?:
              type: integer
            bronze?:
              type: integer
        creation_date?:
          type: integer
        answer_count?:
          type: integer
        question_count?:
          type: integer
        site_name?:
          type: string
        account_id?:
          type: integer
        user_type?:
          type: string
        site_url?:
          type: string
        user_id?:
          type: integer
        top_questions?:
          type: array
        top_answers?:
          type: array
  notifications:
    type: array
    items:
      type: object
      properties:
        notification_type?:
          type: string
        site?:
          type: object
          properties:
            icon_url?:
              type: string
            audience?:
              type: string
            aliases?:
              type: array
            favicon_url?:
              type: string
            site_type?:
              type: string
            logo_url?:
              type: string
            api_site_parameter?:
              type: string
            open_beta_date?:
              type: integer
            site_state?:
              type: string
            related_sites?:
              type: array
            closed_beta_date?:
              type: integer
            markdown_extensions?:
              type: array
            site_url?:
              type: string
            styling?:
              type: object
              properties:
                tag_background_color?:
                  type: string
                link_color?:
                  type: string
                tag_foreground_color?:
                  type: string
            name?:
              type: string
            high_resolution_icon_url?:
              type: string
            twitter_account?:
              type: string
            launch_date?:
              type: integer
        post_id?:
          type: integer
        is_unread?:
          type: boolean
        creation_date?:
          type: integer
        body?:
          type: string
  posts:
    type: array
    items:
      type: object
      properties:
        comment_count?:
          type: integer
        owner?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        comments?:
          type: array
        last_editor?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        link?:
          type: string
        last_activity_date?:
          type: integer
        creation_date?:
          type: integer
        body?:
          type: string
        title?:
          type: string
        share_link?:
          type: string
        score?:
          type: integer
        downvoted?:
          type: boolean
        body_markdown?:
          type: string
        down_vote_count?:
          type: integer
        post_id?:
          type: integer
        upvoted?:
          type: boolean
        post_type?:
          type: string
        up_vote_count?:
          type: integer
        last_edit_date?:
          type: integer
  privileges:
    type: array
    items:
      type: object
      properties:
        short_description?:
          type: string
        description?:
          type: string
        reputation?:
          type: integer
  question_timeline_events:
    type: array
    items:
      type: object
      properties:
        owner?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        down_vote_count?:
          type: integer
        post_id?:
          type: integer
        creation_date?:
          type: integer
        revision_guid?:
          type: string
        comment_id?:
          type: integer
        question_id?:
          type: integer
        user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        up_vote_count?:
          type: integer
        timeline_type?:
          type: string
  questions:
    type: array
    items:
      type: object
      properties:
        comment_count?:
          type: integer
        closed_date?:
          type: integer
        closed_details?:
          type: object
          properties:
            reason?:
              type: string
            by_users?:
              type: array
            original_questions?:
              type: array
            description?:
              type: string
            on_hold?:
              type: boolean
        answers?:
          type: array
        link?:
          type: string
        locked_date?:
          type: integer
        can_flag?:
          type: boolean
        answer_count?:
          type: integer
        body?:
          type: string
        title?:
          type: string
        community_owned_date?:
          type: integer
        score?:
          type: integer
        accepted_answer_id?:
          type: integer
        downvoted?:
          type: boolean
        down_vote_count?:
          type: integer
        reopen_vote_count?:
          type: integer
        bounty_closes_date?:
          type: integer
        closed_reason?:
          type: string
        favorite_count?:
          type: integer
        migrated_to?:
          type: object
          properties:
            other_site?:
              type: object
              properties:
                icon_url?:
                  type: string
                audience?:
                  type: string
                aliases?:
                  type: array
                favicon_url?:
                  type: string
                site_type?:
                  type: string
                logo_url?:
                  type: string
                api_site_parameter?:
                  type: string
                open_beta_date?:
                  type: integer
                site_state?:
                  type: string
                related_sites?:
                  type: array
                closed_beta_date?:
                  type: integer
                markdown_extensions?:
                  type: array
                site_url?:
                  type: string
                styling?:
                  type: object
                  properties:
                    tag_background_color?:
                      type: string
                    link_color?:
                      type: string
                    tag_foreground_color?:
                      type: string
                name?:
                  type: string
                high_resolution_icon_url?:
                  type: string
                twitter_account?:
                  type: string
                launch_date?:
                  type: integer
            on_date?:
              type: integer
            question_id?:
              type: integer
        favorited?:
          type: boolean
        notice?:
          type: object
          properties:
            owner_user_id?:
              type: integer
            creation_date?:
              type: integer
            body?:
              type: string
        owner?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        comments?:
          type: array
        last_editor?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        last_activity_date?:
          type: integer
        migrated_from?:
          type: object
          properties:
            other_site?:
              type: object
              properties:
                icon_url?:
                  type: string
                audience?:
                  type: string
                aliases?:
                  type: array
                favicon_url?:
                  type: string
                site_type?:
                  type: string
                logo_url?:
                  type: string
                api_site_parameter?:
                  type: string
                open_beta_date?:
                  type: integer
                site_state?:
                  type: string
                related_sites?:
                  type: array
                closed_beta_date?:
                  type: integer
                markdown_extensions?:
                  type: array
                site_url?:
                  type: string
                styling?:
                  type: object
                  properties:
                    tag_background_color?:
                      type: string
                    link_color?:
                      type: string
                    tag_foreground_color?:
                      type: string
                name?:
                  type: string
                high_resolution_icon_url?:
                  type: string
                twitter_account?:
                  type: string
                launch_date?:
                  type: integer
            on_date?:
              type: integer
            question_id?:
              type: integer
        creation_date?:
          type: integer
        question_id?:
          type: integer
        tags?:
          type: array
        share_link?:
          type: string
        can_close?:
          type: boolean
        bounty_amount?:
          type: integer
        body_markdown?:
          type: string
        bounty_user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        upvoted?:
          type: boolean
        protected_date?:
          type: integer
        is_answered?:
          type: boolean
        close_vote_count?:
          type: integer
        delete_vote_count?:
          type: integer
        up_vote_count?:
          type: integer
        view_count?:
          type: integer
        last_edit_date?:
          type: integer
  reputation_changes:
    type: array
    items:
      type: object
      properties:
        post_id?:
          type: integer
        vote_type?:
          type: string
        user_id?:
          type: integer
        reputation_change?:
          type: integer
        link?:
          type: string
        post_type?:
          type: string
        on_date?:
          type: integer
        title?:
          type: string
  reputation_history:
    type: array
    items:
      type: object
      properties:
        post_id?:
          type: integer
        reputation_history_type?:
          type: string
        user_id?:
          type: integer
        reputation_change?:
          type: integer
        creation_date?:
          type: integer
  reputation_objects:
    type: array
    items:
      type: object
      properties:
        post_id?:
          type: integer
        vote_type?:
          type: string
        user_id?:
          type: integer
        reputation_change?:
          type: integer
        link?:
          type: string
        post_type?:
          type: string
        on_date?:
          type: integer
        title?:
          type: string
  revisions:
    type: array
    items:
      type: object
      properties:
        last_tags?:
          type: array
        revision_number?:
          type: integer
        creation_date?:
          type: integer
        revision_guid?:
          type: string
        body?:
          type: string
        is_rollback?:
          type: boolean
        title?:
          type: string
        tags?:
          type: array
        revision_type?:
          type: string
        last_body?:
          type: string
        post_id?:
          type: integer
        comment?:
          type: string
        post_type?:
          type: string
        last_title?:
          type: string
        user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        set_community_wiki?:
          type: boolean
  sites:
    type: array
    items:
      type: object
      properties:
        icon_url?:
          type: string
        audience?:
          type: string
        aliases?:
          type: array
        favicon_url?:
          type: string
        site_type?:
          type: string
        logo_url?:
          type: string
        api_site_parameter?:
          type: string
        open_beta_date?:
          type: integer
        site_state?:
          type: string
        related_sites?:
          type: array
        closed_beta_date?:
          type: integer
        markdown_extensions?:
          type: array
        site_url?:
          type: string
        styling?:
          type: object
          properties:
            tag_background_color?:
              type: string
            link_color?:
              type: string
            tag_foreground_color?:
              type: string
        name?:
          type: string
        high_resolution_icon_url?:
          type: string
        twitter_account?:
          type: string
        launch_date?:
          type: integer
  suggested-edits:
    type: array
    items:
      type: object
      properties:
        rejection_date?:
          type: integer
        approval_date?:
          type: integer
        post_id?:
          type: integer
        proposing_user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        comment?:
          type: string
        post_type?:
          type: string
        creation_date?:
          type: integer
        body?:
          type: string
        title?:
          type: string
        suggested_edit_id?:
          type: integer
        tags?:
          type: array
  tag_score_objects:
    type: array
    items:
      type: object
      properties:
        score?:
          type: integer
        post_count?:
          type: integer
        user?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
  tag_synonyms:
    type: array
    items:
      type: object
      properties:
        from_tag?:
          type: string
        last_applied_date?:
          type: integer
        creation_date?:
          type: integer
        to_tag?:
          type: string
        applied_count?:
          type: integer
  tag_wikis:
    type: array
    items:
      type: object
      properties:
        last_body_editor?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        tag_name?:
          type: string
        last_excerpt_editor?:
          type: object
          properties:
            profile_image?:
              type: string
            user_type?:
              type: string
            user_id?:
              type: integer
            link?:
              type: string
            reputation?:
              type: integer
            badge_counts?:
              type: object
              properties:
                gold?:
                  type: integer
                silver?:
                  type: integer
                bronze?:
                  type: integer
            display_name?:
              type: string
            accept_rate?:
              type: integer
        body?:
          type: string
        excerpt?:
          type: string
        excerpt_last_edit_date?:
          type: integer
        body_last_edit_date?:
          type: integer
  tags:
    type: array
    items:
      type: object
      properties:
        is_required?:
          type: boolean
        user_id?:
          type: integer
        synonyms?:
          type: array
        count?:
          type: integer
        name?:
          type: string
        has_synonyms?:
          type: boolean
        is_moderator_only?:
          type: boolean
        last_activity_date?:
          type: integer
  top_tag_objects:
    type: array
    items:
      type: object
      properties:
        question_count?:
          type: integer
        user_id?:
          type: integer
        tag_name?:
          type: string
        question_score?:
          type: integer
        answer_count?:
          type: integer
        answer_score?:
          type: integer
  user_timeline_objects:
    type: array
    items:
      type: object
      properties:
        post_id?:
          type: integer
        user_id?:
          type: integer
        badge_id?:
          type: integer
        link?:
          type: string
        post_type?:
          type: string
        creation_date?:
          type: integer
        detail?:
          type: string
        comment_id?:
          type: integer
        title?:
          type: string
        suggested_edit_id?:
          type: integer
        timeline_type?:
          type: string
  users:
    type: array
    items:
      type: object
      properties:
        reputation_change_quarter?:
          type: integer
        link?:
          type: string
        last_access_date?:
          type: integer
        last_modified_date?:
          type: integer
        reputation?:
          type: integer
        badge_counts?:
          type: object
          properties:
            gold?:
              type: integer
            silver?:
              type: integer
            bronze?:
              type: integer
        answer_count?:
          type: integer
        about_me?:
          type: string
        accept_rate?:
          type: integer
        reputation_change_year?:
          type: integer
        profile_image?:
          type: string
        user_type?:
          type: string
        down_vote_count?:
          type: integer
        reputation_change_day?:
          type: integer
        reputation_change_month?:
          type: integer
        creation_date?:
          type: integer
        display_name?:
          type: string
        is_employee?:
          type: boolean
        question_count?:
          type: integer
        account_id?:
          type: integer
        website_url?:
          type: string
        reputation_change_week?:
          type: integer
        user_id?:
          type: integer
        timed_penalty_date?:
          type: integer
        location?:
          type: string
        age?:
          type: integer
        up_vote_count?:
          type: integer
        view_count?:
          type: integer
  write_permissions:
    type: array
    items:
      type: object
      properties:
        min_seconds_between_actions?:
          type: integer
        max_daily_actions?:
          type: integer
        object_type?:
          type: string
        user_id?:
          type: integer
        can_delete?:
          type: boolean
        can_edit?:
          type: boolean
        can_add?:
          type: boolean
  created_comment:
    type: object
    properties:
      body?:
        type: string
      body_markdown?:
        type: string
      can_flag?:
        type: boolean
      comment_id?:
        type: integer
      creation_date?:
        type: integer
      edited?:
        type: boolean
      link?:
        type: string
      owner?:
        type: object
        properties:
          profile_image?:
            type: string
          user_type?:
            type: string
          user_id?:
            type: integer
          link?:
            type: string
          reputation?:
            type: integer
          badge_counts?:
            type: object
            properties:
              gold?:
                type: integer
              silver?:
                type: integer
              bronze?:
                type: integer
          display_name?:
            type: string
          accept_rate?:
            type: integer
      post_id?:
        type: integer
      post_type?:
        type: string
      reply_to_user?:
        type: object
        properties:
          profile_image?:
            type: string
          user_type?:
            type: string
          user_id?:
            type: integer
          link?:
            type: string
          reputation?:
            type: integer
          badge_counts?:
            type: object
            properties:
              gold?:
                type: integer
              silver?:
                type: integer
              bronze?:
                type: integer
          display_name?:
            type: string
          accept_rate?:
            type: integer
      score?:
        type: integer
      upvoted?:
        type: boolean
  error:
    type: object
    properties:
      error_id?:
        type: number
      error_message?:
        type: string
      error_name?:
        type: string
  info_object:
    type: object
    properties:
      answers_per_minute?:
        type: number
      api_revision?:
        type: string
      badges_per_minute?:
        type: number
      new_active_users?:
        type: integer
      questions_per_minute?:
        type: number
      site?:
        type: object
        properties:
          icon_url?:
            type: string
          audience?:
            type: string
          aliases?:
            type: array
          favicon_url?:
            type: string
          site_type?:
            type: string
          logo_url?:
            type: string
          api_site_parameter?:
            type: string
          open_beta_date?:
            type: integer
          site_state?:
            type: string
          related_sites?:
            type: array
          closed_beta_date?:
            type: integer
          markdown_extensions?:
            type: array
          site_url?:
            type: string
          styling?:
            type: object
            properties:
              tag_background_color?:
                type: string
              link_color?:
                type: string
              tag_foreground_color?:
                type: string
          name?:
            type: string
          high_resolution_icon_url?:
            type: string
          twitter_account?:
            type: string
          launch_date?:
            type: integer
      total_accepted?:
        type: integer
      total_answers?:
        type: integer
      total_badges?:
        type: integer
      total_comments?:
        type: integer
      total_questions?:
        type: integer
      total_unanswered?:
        type: integer
      total_users?:
        type: integer
      total_votes?:
        type: integer
  single_filter:
    type: object
    properties:
      filter?:
        type: string
      filter_type?:
        type: string
      included_fields?:
        type: array
  user:
    type: object
    properties:
      about_me?:
        type: string
      accept_rate?:
        type: integer
      account_id?:
        type: integer
      age?:
        type: integer
      answer_count?:
        type: integer
      badge_counts?:
        type: object
        properties:
          gold?:
            type: integer
          silver?:
            type: integer
          bronze?:
            type: integer
      creation_date?:
        type: integer
      display_name?:
        type: string
      down_vote_count?:
        type: integer
      is_employee?:
        type: boolean
      last_access_date?:
        type: integer
      last_modified_date?:
        type: integer
      link?:
        type: string
      location?:
        type: string
      profile_image?:
        type: string
      question_count?:
        type: integer
      reputation?:
        type: integer
      reputation_change_day?:
        type: integer
      reputation_change_month?:
        type: integer
      reputation_change_quarter?:
        type: integer
      reputation_change_week?:
        type: integer
      reputation_change_year?:
        type: integer
      timed_penalty_date?:
        type: integer
      up_vote_count?:
        type: integer
      user_id?:
        type: integer
      user_type?:
        type: string
      view_count?:
        type: integer
      website_url?:
        type: string
/access-tokens:
  /{accessTokens}:
    uriParameters:
      accessTokens:
        type: string
        description: String list (semicolon delimited).
        displayName: accessTokens
    /invalidate:
      get:
        description: "Immediately expires the access tokens passed. This method is\
          \ meant to allow an application to discard any active access tokens it no\
          \ longer needs.\n \n{accessTokens} can contain up to 20 access tokens. These\
          \ are obtained by authenticating a user using OAuth 2.0.\n \nThis method\
          \ returns a list of access_tokens.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
        responses:
          200:
            description: OK
            body:
              application/json:
                type: access_tokens
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Reads the properties for a set of access tokens.\n \n{accessTokens}\
        \ can contain up to 20 access tokens. These are obtained by authenticating\
        \ a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
      responses:
        200:
          description: OK
          body:
            application/json:
              type: access_tokens
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/answers:
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    /comments:
      get:
        description: "Gets the comments on a set of answers.\n \nIf you know that\
          \ you have an answer id and need the comments, use this method. If you know\
          \ you have a question id, use /questions/{id}/comments. If you are unsure,\
          \ use /posts/{id}/comments.\n \n{ids} can contain up to 100 semicolon delimited\
          \ ids, to find ids programatically look for answer_id on answer objects.\n\
          \ \nThe sorts accepted by this method operate on the follow fields of the\
          \ comment object:\n - creation - creation_date\n - votes - score\n  creation\
          \ is the default sort.\n \n It is possible to create moderately complex\
          \ queries using sort, min, max, fromdate, and todate.\n \nThis method returns\
          \ a list of comments.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: comments
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Gets the set of answers identified by ids.\n \nThis is meant for\
        \ batch fetcing of questions. A useful trick to poll for updates is to sort\
        \ by activity, with a minimum date of the last time you polled.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for answer_id on answer objects.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the answer object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n \nThis method returns a list of answers.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: answers
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns all the undeleted answers in the system.\n \nThe sorts accepted\
      \ by this method operate on the follow fields of the answer object:\n - activity\
      \ - last_activity_date\n - creation - creation_date\n - votes - score\n  activity\
      \ is the default sort.\n \n It is possible to create moderately complex queries\
      \ using sort, min, max, fromdate, and todate.\n \nThis method returns a list\
      \ of answers.\n"
    queryParameters:
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        displayName: max
      min?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - activity
        - creation
        - votes
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: answers
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/apps:
  /{accessTokens}:
    uriParameters:
      accessTokens:
        type: string
        description: String list (semicolon delimited).
        displayName: accessTokens
    /de-authenticate:
      get:
        description: "Passing valid access_tokens to this method causes the application\
          \ that created them to be de-authorized by the user associated with each\
          \ access_token. This will remove the application from their apps tab, and\
          \ cause all other existing access_tokens to be destroyed.\n \nThis method\
          \ is meant for uninstalling applications, recovering from access_token leaks,\
          \ or simply as a stronger form of /access-tokens/{accessTokens}/invalidate.\n\
          \ \nNothing prevents a user from re-authenticate to an application that\
          \ has de-authenticated itself, the user will be prompted to approve the\
          \ application again however.\n \n{accessTokens} can contain up to 20 access\
          \ tokens. These are obtained by authenticating a user using OAuth 2.0.\n\
          \ \nThis method returns a list of access_tokens.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
        responses:
          200:
            description: OK
            body:
              application/json:
                type: access_tokens
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/badges:
  /name:
    get:
      description: "Gets all explicitly named badges in the system.\n \nA named badged\
        \ stands in opposition to a tag-based badge. These are referred to as general\
        \ badges on the sites themselves.\n \nFor the rank sort, bronze is greater\
        \ than silver which is greater than gold. Along with sort=rank, set max=gold\
        \ for just gold badges, max=silver&min=silver for just silver, and min=bronze\
        \ for just bronze.\n \nrank is the default sort.\n \nThis method returns a\
        \ list of badges.\n"
      queryParameters:
        inname?:
          type: string
          displayName: inname
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
          displayName: max
        min?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - rank
          - name
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: badges
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /recipients:
    get:
      description: "Returns recently awarded badges in the system.\n \nAs these badges\
        \ have been awarded, they will have the badge.user property set.\n \nThis\
        \ method returns a list of badges.\n"
      queryParameters:
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: badges
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /tags:
    get:
      description: "Returns the badges that are awarded for participation in specific\
        \ tags.\n \nFor the rank sort, bronze is greater than silver which is greater\
        \ than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver\
        \ for just silver, and min=bronze for just bronze.\n \nrank is the default\
        \ sort.\n \nThis method returns a list of badges.\n"
      queryParameters:
        inname?:
          type: string
          displayName: inname
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
          displayName: max
        min?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - rank
          - name
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: badges
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    /recipients:
      get:
        description: "Returns recently awarded badges in the system, constrained to\
          \ a certain set of badges.\n \nAs these badges have been awarded, they will\
          \ have the badge.user property set.\n \n{ids} can contain up to 100 semicolon\
          \ delimited ids, to find ids programatically look for badge_id on badge\
          \ objects.\n \nThis method returns a list of badges.\n"
        queryParameters:
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: badges
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Gets the badges identified in id.\n \nNote that badge ids are\
        \ not constant across sites, and thus should be looked up via the /badges\
        \ method. A badge id on a single site is, however, guaranteed to be stable.\n\
        \ \nBadge sorts are a tad complicated. For the purposes of sorting (and min/max)\
        \ tag_based is considered to be greater than named.\n \nThis means that you\
        \ can get a list of all tag based badges by passing min=tag_based, and conversely\
        \ all the named badges by passing max=named, with sort=type.\n \nFor ranks,\
        \ bronze is greater than silver which is greater than gold. Along with sort=rank,\
        \ set max=gold for just gold badges, max=silver&min=silver for just silver,\
        \ and min=bronze for just bronze.\n \nrank is the default sort.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for badge_id on badge objects.\n \nThis method returns a list of badges.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
            sort = type => string
          displayName: max
        min?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
            sort = type => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - rank
          - name
          - type
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: badges
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns all the badges in the system.\n \nBadge sorts are a tad\
      \ complicated. For the purposes of sorting (and min/max) tag_based is considered\
      \ to be greater than named.\n \nThis means that you can get a list of all tag\
      \ based badges by passing min=tag_based, and conversely all the named badges\
      \ by passing max=named, with sort=type.\n \nFor ranks, bronze is greater than\
      \ silver which is greater than gold. Along with sort=rank, set max=gold for\
      \ just gold badges, max=silver&min=silver for just silver, and min=bronze for\
      \ just bronze.\n \nrank is the default sort.\n \nThis method returns a list\
      \ of badges.\n"
    queryParameters:
      inname?:
        type: string
        displayName: inname
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        displayName: max
      min?:
        type: string
        description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - rank
        - name
        - type
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: badges
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/comments:
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    get:
      description: "Gets the comments identified in id.\n \nThis method is most useful\
        \ if you have a cache of comment ids obtained through other means (such as\
        \ /questions/{id}/comments) but suspect the data may be stale.\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for comment_id on comment objects.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the comment object:\n - creation - creation_date\n\
        \ - votes - score\n  creation is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \ \nThis method returns a list of comments.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: comments
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{id}:
    uriParameters:
      id:
        type: integer
        displayName: id
    /delete:
      post:
        description: "Deletes a comment.\n \nUse an access_token with write_access\
          \ to delete a comment.\n \nIn practice, this method will never return an\
          \ object.\n"
        queryParameters:
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
          preview?:
            type: boolean
            displayName: preview
        responses:
          200:
            description: OK
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /edit:
      post:
        description: "Edit an existing comment.\n \nUse an access_token with write_access\
          \ to edit an existing comment.\n \nThis method return the created comment.\n"
        queryParameters:
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
          body?:
            type: string
            displayName: body
          preview?:
            type: boolean
            displayName: preview
        responses:
          200:
            description: OK
            body:
              application/json:
                type: created_comment
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Gets all the comments on the site.\n \nIf you're filtering for interesting\
      \ comments (by score, creation date, etc.) make use of the sort paramter with\
      \ appropriate min and max values.\n \nIf you're looking to query conversations\
      \ between users, instead use the /users/{ids}/mentioned and /users/{ids}/comments/{toid}\
      \ methods.\n \nThe sorts accepted by this method operate on the follow fields\
      \ of the comment object:\n - creation - creation_date\n - votes - score\n  creation\
      \ is the default sort.\n \n It is possible to create moderately complex queries\
      \ using sort, min, max, fromdate, and todate.\n \nThis method returns a list\
      \ of comments.\n"
    queryParameters:
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = creation => date
          sort = votes => number
        displayName: max
      min?:
        type: string
        description: |
          sort = creation => date
          sort = votes => number
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - creation
        - votes
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: comments
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/errors:
  /{id}:
    uriParameters:
      id:
        type: integer
        displayName: id
    get:
      description: "This method allows you to generate an error.\n \nThis method is\
        \ only intended for use when testing an application or library. Unlike other\
        \ methods in the API, its contract is not frozen, and new error codes may\
        \ be added at any time.\n \nThis method results in an error, which will be\
        \ expressed with a 400 HTTP status code and setting the error* properties\
        \ on the wrapper object.\n"
      responses:
        200:
          description: OK
          body:
            application/json:
              type: error
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns the various error codes that can be produced by the API.\n\
      \ \nThis method is provided for discovery, documentation, and testing purposes,\
      \ it is not expected many applications will consume it during normal operation.\n\
      \ \nFor testing purposes, look into the /errors/{id} method which simulates\
      \ errors given a code.\n \nThis method returns a list of errors.\n"
    queryParameters:
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
    responses:
      200:
        description: OK
        body:
          application/json:
            type: errors
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/events:
  get:
    description: "Returns a stream of events that have occurred on the site.\n \n\
      The API considers the following \"events\":\n - posting a question\n - posting\
      \ an answer\n - posting a comment\n - editing a post\n - creating a user\n \
      \ \n \nEvents are only accessible for 15 minutes after they occurred, and by\
      \ default only events in the last 5 minutes are returned. You can specify the\
      \ age of the oldest event returned by setting the since parameter.\n \nIt is\
      \ advised that developers batch events by ids and make as few subsequent requests\
      \ to other methods as possible.\n \nThis method returns a list of events.\n"
    queryParameters:
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
      since?:
        type: integer
        description: Unix date.
        displayName: since
    responses:
      200:
        description: OK
        body:
          application/json:
            type: events
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/filters:
  /create:
    get:
      description: "Creates a new filter given a list of includes, excludes, a base\
        \ filter, and whether or not this filter should be \"unsafe\".\n \nFilter\
        \ \"safety\" is defined as follows. Any string returned as a result of an\
        \ API call with a safe filter will be inline-able into HTML without script-injection\
        \ concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping,\
        \ etc.) will be necessary on returned strings. Applications that wish to handle\
        \ sanitizing themselves should create an unsafe filter. All filters are safe\
        \ by default, under the assumption that double-encoding bugs are more desirable\
        \ than script injections.\n \nIf no base filter is specified, the default\
        \ filter is assumed. When building a filter from scratch, the none built-in\
        \ filter is useful.\n \nWhen the size of the parameters being sent to this\
        \ method grows to large, problems can occur. This method will accept POST\
        \ requests to mitigate this.\n \nIt is not expected that many applications\
        \ will call this method at runtime, filters should be pre-calculated and \"\
        baked in\" in the common cases. Furthermore, there are a number of built-in\
        \ filters which cover common use cases.\n \nThis method returns a single filter.\n"
      queryParameters:
        base?:
          type: string
          displayName: base
        exclude?:
          type: string
          description: String list (semicolon delimited).
          displayName: exclude
        include?:
          type: string
          description: String list (semicolon delimited).
          displayName: include
        unsafe?:
          type: boolean
          displayName: unsafe
      responses:
        200:
          description: OK
          body:
            application/json:
              type: single_filter
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{filters}:
    uriParameters:
      filters:
        type: string
        description: String list (semicolon delimited).
        displayName: filters
    get:
      description: "Returns the fields included by the given filters, and the \"safeness\"\
        \ of those filters.\n \nIt is not expected that this method will be consumed\
        \ by many applications at runtime, it is provided to aid in debugging.\n \n\
        {filters} can contain up to 20 semicolon delimited filters. Filters are obtained\
        \ via calls to /filters/create, or by using a built-in filter.\n \nThis method\
        \ returns a list of filters.\n"
      responses:
        200:
          description: OK
          body:
            application/json:
              type: filters
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/inbox:
  /unread:
    get:
      description: "Returns the unread items in a user's inbox.\n \nThis method requires\
        \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
        \ returns a list of inbox items.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        since?:
          type: integer
          description: Unix date.
          displayName: since
      responses:
        200:
          description: OK
          body:
            application/json:
              type: inbox_items
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns a user's inbox.\n \nThis method requires an access_token,\
      \ with a scope containing \"read_inbox\".\n \nThis method returns a list of\
      \ inbox items.\n"
    queryParameters:
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
    responses:
      200:
        description: OK
        body:
          application/json:
            type: inbox_items
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/info:
  get:
    description: "Returns a collection of statistics about the site.\n \nData to facilitate\
      \ per-site customization, discover related sites, and aggregate statistics is\
      \ all returned by this method.\n \nThis data is cached very aggressively, by\
      \ design. Query sparingly, ideally no more than once an hour.\n \nThis method\
      \ returns an info object.\n"
    queryParameters:
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: info_object
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/me:
  /answers:
    get:
      description: "Returns the answers owned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of answers.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: answers
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /associated:
    get:
      description: "Returns all of a user's associated accounts, given an access_token\
        \ for them.\n \nThis method returns a list of network users.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
      responses:
        200:
          description: OK
          body:
            application/json:
              type: network_users
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /badges:
    get:
      description: "Returns the badges earned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of badges.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
            sort = type => string
          displayName: max
        min?:
          type: string
          description: |
            sort = rank => string
            sort = name => string
            sort = type => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - rank
          - name
          - type
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: badges
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /comments:
    /{toId}:
      uriParameters:
        toId:
          type: integer
          displayName: toId
      get:
        description: "Returns the comments owned by the user associated with the given\
          \ access_token that are in reply to the user identified by {toId}.\n \n\
          This method returns a list of comments.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: comments
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns the comments owned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of comments.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: comments
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /favorites:
    get:
      description: "Returns the questions favorites by the user associated with the\
        \ given access_token.\n \nThis method returns a list of questions.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
            sort = added => date
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
            sort = added => date
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
          - added
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /inbox:
    /unread:
      get:
        description: "Returns the unread items in the user identified by access_token's\
          \ inbox.\n \nThis method requires an access_token, with a scope containing\
          \ \"read_inbox\".\n \nThis method returns a list of inbox items.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
          since?:
            type: integer
            description: Unix date.
            displayName: since
        responses:
          200:
            description: OK
            body:
              application/json:
                type: inbox_items
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns the user identified by access_token's inbox.\n \nThis\
        \ method requires an access_token, with a scope containing \"read_inbox\"\
        .\n \nThis method returns a list of inbox items.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: inbox_items
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /mentioned:
    get:
      description: "Returns the comments mentioning the user associated with the given\
        \ access_token.\n \nThis method returns a list of comments.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: comments
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /merges:
    get:
      description: "Returns a record of merges that have occurred involving a user\
        \ identified by an access_token.\n \nThis method allows you to take now invalid\
        \ account ids and find what account they've become, or take currently valid\
        \ account ids and find which ids were equivalent in the past.\n \nThis is\
        \ most useful when confirming that an account_id is in fact \"new\" to an\
        \ application.\n \nAccount merges can happen for a wide range of reasons,\
        \ applications should not make assumptions that merges have particular causes.\n\
        \ \nNote that accounts are managed at a network level, users on a site may\
        \ be merged due to an account level merge but there is no guarantee that a\
        \ merge has an effect on any particular site.\n \nThis method returns a list\
        \ of account_merge.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
      responses:
        200:
          description: OK
          body:
            application/json:
              type: account_merge
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /notifications:
    /unread:
      get:
        description: "Returns a user's unread notifications, given an access_token.\n\
          \ \nThis method requires an access_token, with a scope containing \"read_inbox\"\
          .\n \nThis method returns a list of notifications.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: notifications
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns a user's notifications, given an access_token.\n \nThis\
        \ method requires an access_token, with a scope containing \"read_inbox\"\
        .\n \nThis method returns a list of notifications.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: notifications
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /privileges:
    get:
      description: "Returns the privileges the user identified by access_token has.\n\
        \ \nThis method returns a list of privileges.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: privileges
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /questions:
    /featured:
      get:
        description: "Returns the questions that have active bounties offered by the\
          \ user associated with the given access_token.\n \nThis method returns a\
          \ list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /no-answers:
      get:
        description: "Returns the questions owned by the user associated with the\
          \ given access_token that have no answers.\n \nThis method returns a list\
          \ of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /unaccepted:
      get:
        description: "Returns the questions owned by the user associated with the\
          \ given access_token that have no accepted answer.\n \nThis method returns\
          \ a list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /unanswered:
      get:
        description: "Returns the questions owned by the user associated with the\
          \ given access_token that are not considered answered.\n \nThis method returns\
          \ a list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns the questions owned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of questions.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /reputation:
    get:
      description: "Returns the reputation changed for the user associated with the\
        \ given access_token.\n \nThis method returns a list of reputation changes.\n"
      queryParameters:
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: reputation_changes
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /reputation-history:
    /full:
      get:
        description: "Returns user's full reputation history, including private events.\n\
          \ \n This method requires an access_token, with a scope containing \"private_info\"\
          .\n \nThis method returns a list of reputation_history.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: reputation_history
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns user's public reputation history.\n \nThis method returns\
        \ a list of reputation_history.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: reputation_history
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /suggested-edits:
    get:
      description: "Returns the suggested edits the user identified by access_token\
        \ has submitted.\n \nThis method returns a list of suggested-edits.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = creation => date
            sort = approval => date
            sort = rejection => date
          displayName: max
        min?:
          type: string
          description: |
            sort = creation => date
            sort = approval => date
            sort = rejection => date
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - creation
          - approval
          - rejection
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: suggested-edits
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /tags:
    /{tags}:
      uriParameters:
        tags:
          type: string
          description: String list (semicolon delimited).
          displayName: tags
      /top-answers:
        get:
          description: "Returns the top 30 answers the user associated with the given\
            \ access_token has posted in response to questions with the given tags.\n\
            \ \nThis method returns a list of answers.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: max
            min?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - activity
              - creation
              - votes
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: answers
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      /top-questions:
        get:
          description: "Returns the top 30 questions the user associated with the\
            \ given access_token has posted in response to questions with the given\
            \ tags.\n \nThis method returns a list of questions.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
                sort = hot => none
                sort = week => none
                sort = month => none
                sort = relevance => none
              displayName: max
            min?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
                sort = hot => none
                sort = week => none
                sort = month => none
                sort = relevance => none
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - activity
              - creation
              - votes
              - hot
              - week
              - month
              - relevance
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: questions
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns the tags the user identified by the access_token passed\
        \ is active in.\n \nThis method returns a list of tags.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = popular => number
            sort = activity => date
            sort = name => string
          displayName: max
        min?:
          type: string
          description: |
            sort = popular => number
            sort = activity => date
            sort = name => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - popular
          - activity
          - name
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: tags
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /timeline:
    get:
      description: "Returns a subset of the actions the user identified by the passed\
        \ access_token has taken on the site.\n \nThis method returns a list of user\
        \ timeline objects.\n"
      queryParameters:
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: user_timeline_objects
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /top-answer-tags:
    get:
      description: "Returns the user identified by access_token's top 30 tags by answer\
        \ score.\n \nThis method returns a list of top tag objects.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: top_tag_objects
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /top-question-tags:
    get:
      description: "Returns the user identified by access_token's top 30 tags by question\
        \ score.\n \nThis method returns a list of top tag objects.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: top_tag_objects
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /write-permissions:
    get:
      description: "Returns the write permissions a user has via the api, given an\
        \ access token.\n \nThe Stack Exchange API gives users the ability to create,\
        \ edit, and delete certain types. This method returns whether the passed user\
        \ is capable of performing those actions at all, as well as how many times\
        \ a day they can.\n \nThis method does not consider the user's current quota\
        \ (ie. if they've already exhausted it for today) nor any additional restrictions\
        \ on write access, such as editing deleted comments.\n \nThis method returns\
        \ a list of write_permissions.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: write_permissions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns the user associated with the passed access_token.\n \nThis\
      \ method returns a user.\n"
    queryParameters:
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        displayName: max
      min?:
        type: string
        description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - reputation
        - creation
        - name
        - modified
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: user
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/notifications:
  /unread:
    get:
      description: "Returns a user's unread notifications.\n \nThis method requires\
        \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
        \ returns a list of notifications.\n"
      queryParameters:
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
      responses:
        200:
          description: OK
          body:
            application/json:
              type: notifications
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns a user's notifications.\n \nThis method requires an access_token,\
      \ with a scope containing \"read_inbox\".\n \nThis method returns a list of\
      \ notifications.\n"
    queryParameters:
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
    responses:
      200:
        description: OK
        body:
          application/json:
            type: notifications
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/posts:
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    /comments:
      get:
        description: "Gets the comments on the posts identified in ids, regardless\
          \ of the type of the posts.\n \nThis method is meant for cases when you\
          \ are unsure of the type of the post id provided. Generally, this would\
          \ be due to obtaining the post id directly from a user.\n \n{ids} can contain\
          \ up to 100 semicolon delimited ids, to find ids programatically look for\
          \ post_id, answer_id, or question_id on post, answer, and question objects\
          \ respectively.\n \nThe sorts accepted by this method operate on the follow\
          \ fields of the comment object:\n - creation - creation_date\n - votes -\
          \ score\n  creation is the default sort.\n \n It is possible to create moderately\
          \ complex queries using sort, min, max, fromdate, and todate.\n \nThis method\
          \ returns a list of comments.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: comments
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /revisions:
      get:
        description: "Returns edit revisions for the posts identified in ids.\n \n\
          {ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for post_id, answer_id, or question_id on post, answer, and question\
          \ objects respectively.\n \nThis method returns a list of revisions.\n"
        queryParameters:
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: revisions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /suggested-edits:
      get:
        description: "Returns suggsted edits on the posts identified in ids.\n \n\
          \ - creation - creation_date\n - approval - approval_date\n - rejection\
          \ - rejection_date\n  creation is the default sort.\n \n {ids} can contain\
          \ up to 100 semicolon delimited ids, to find ids programatically look for\
          \ post_id, answer_id, or question_id on post, answer, and question objects\
          \ respectively.\n \nThis method returns a list of suggested-edits.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = approval => date
              sort = rejection => date
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = approval => date
              sort = rejection => date
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - approval
            - rejection
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: suggested-edits
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Fetches a set of posts by ids.\n \nThis method is meant for grabbing\
        \ an object when unsure whether an id identifies a question or an answer.\
        \ This is most common with user entered data.\n \n{ids} can contain up to\
        \ 100 semicolon delimited ids, to find ids programatically look for post_id,\
        \ answer_id, or question_id on post, answer, and question objects respectively.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ post object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \ \nThis method returns a list of posts.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: posts
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{id}:
    uriParameters:
      id:
        type: integer
        displayName: id
    /comments:
      /add:
        post:
          description: "Create a new comment.\n \nUse an access_token with write_access\
            \ to create a new comment on a post.\n \nThis method returns the created\
            \ comment.\n"
          queryParameters:
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
            body?:
              type: string
              displayName: body
            preview?:
              type: boolean
              displayName: preview
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: created_comment
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Fetches all posts (questions and answers) on the site.\n \nIn many\
      \ ways this method is the union of /questions and /answers, returning both sets\
      \ of data albeit only the common fields.\n \nMost applications should use the\
      \ question or answer specific methods, but /posts is available for those rare\
      \ cases where any activity is of intereset. Examples of such queries would be:\
      \ \"all posts on Jan. 1st 2011\" or \"top 10 posts by score of all time\".\n\
      \ \nThe sorts accepted by this method operate on the follow fields of the post\
      \ object:\n - activity - last_activity_date\n - creation - creation_date\n -\
      \ votes - score\n  activity is the default sort.\n \n It is possible to create\
      \ moderately complex queries using sort, min, max, fromdate, and todate.\n \n\
      This method returns a list of posts.\n"
    queryParameters:
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        displayName: max
      min?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - activity
        - creation
        - votes
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: posts
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/privileges:
  get:
    description: "Returns the earnable privileges on a site.\n \nPrivileges define\
      \ abilities a user can earn (via reputation) on any Stack Exchange site.\n \n\
      While fairly stable, over time they do change. New ones are introduced with\
      \ new features, and the reputation requirements change as a site matures.\n\
      \ \nThis method returns a list of privileges.\n"
    queryParameters:
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: privileges
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/questions:
  /featured:
    get:
      description: "Returns all the questions with active bounties in the system.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ question object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \ \nThis method returns a list of questions.\n"
      queryParameters:
        tagged?:
          type: string
          description: String list (semicolon delimited).
          displayName: tagged
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /no-answers:
    get:
      description: "Returns questions which have received no answers.\n \nCompare\
        \ with /questions/unanswered which mearly returns questions that the sites\
        \ consider insufficiently well answered.\n \nThis method corresponds roughly\
        \ with the this site tab.\n \nTo constrain questions returned to those with\
        \ a set of tags, use the tagged parameter with a semi-colon delimited list\
        \ of tags. This is an and contraint, passing tagged=c;java will return only\
        \ those questions with both tags. As such, passing more than 5 tags will always\
        \ return zero results.\n \nThe sorts accepted by this method operate on the\
        \ follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n"
      queryParameters:
        tagged?:
          type: string
          description: String list (semicolon delimited).
          displayName: tagged
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /unanswered:
    get:
      description: "Returns questions the site considers to be unanswered.\n \nNote\
        \ that just because a question has an answer, that does not mean it is considered\
        \ answered. While the rules are subject to change, at this time a question\
        \ must have at least one upvoted answer to be considered answered.\n \nTo\
        \ constrain questions returned to those with a set of tags, use the tagged\
        \ parameter with a semi-colon delimited list of tags. This is an and contraint,\
        \ passing tagged=c;java will return only those questions with both tags. As\
        \ such, passing more than 5 tags will always return zero results.\n \nCompare\
        \ with /questions/no-answers.\n \nThis method corresponds roughly with the\
        \ unanswered tab.\n \nThe sorts accepted by this method operate on the follow\
        \ fields of the question object:\n - activity - last_activity_date\n - creation\
        \ - creation_date\n - votes - score\n  activity is the default sort.\n \n\
        \ It is possible to create moderately complex queries using sort, min, max,\
        \ fromdate, and todate.\n \nThis method returns a list of questions.\n"
      queryParameters:
        tagged?:
          type: string
          description: String list (semicolon delimited).
          displayName: tagged
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    /answers:
      get:
        description: "Gets the answers to a set of questions identified in id.\n \n\
          This method is most useful if you have a set of interesting questions, and\
          \ you wish to obtain all of their answers at once or if you are polling\
          \ for new or updates answers (in conjunction with sort=activity).\n \n{ids}\
          \ can contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for question_id on question objects.\n \nThe sorts accepted by this\
          \ method operate on the follow fields of the answer object:\n - activity\
          \ - last_activity_date\n - creation - creation_date\n - votes - score\n\
          \  activity is the default sort.\n \n It is possible to create moderately\
          \ complex queries using sort, min, max, fromdate, and todate.\n \nThis method\
          \ returns a list of answers.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: answers
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /comments:
      get:
        description: "Gets the comments on a question.\n \nIf you know that you have\
          \ an question id and need the comments, use this method. If you know you\
          \ have a answer id, use /answers/{ids}/comments. If you are unsure, use\
          \ /posts/{ids}/comments.\n \n{ids} can contain up to 100 semicolon delimited\
          \ ids, to find ids programatically look for question_id on question objects.\n\
          \ \nThe sorts accepted by this method operate on the follow fields of the\
          \ comment object:\n - creation - creation_date\n - votes - score\n  creation\
          \ is the default sort.\n \n It is possible to create moderately complex\
          \ queries using sort, min, max, fromdate, and todate.\n \nThis method returns\
          \ a list of comments.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: comments
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /linked:
      get:
        description: "Gets questions which link to those questions identified in {ids}.\n\
          \ \nThis method only considers questions that are linked within a site,\
          \ and will never return questions from another Stack Exchange site.\n \n\
          A question is considered \"linked\" when it explicitly includes a hyperlink\
          \ to another question, there are no other heuristics.\n \n{ids} can contain\
          \ up to 100 semicolon delimited ids, to find ids programatically look for\
          \ question_id on question objects.\n \nThe sorts accepted by this method\
          \ operate on the follow fields of the question object:\n - activity - last_activity_date\n\
          \ - creation - creation_date\n - votes - score\n - rank - a priority sort\
          \ by site applies, subject to change at any time Does not accept min or\
          \ max\n  activity is the default sort.\n \n It is possible to create moderately\
          \ complex queries using sort, min, max, fromdate, and todate.\n \nThis method\
          \ returns a list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
              sort = rank => none
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
              sort = rank => none
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
            - rank
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /related:
      get:
        description: "Returns questions that the site considers related to those identified\
          \ in {ids}.\n \nThe algorithm for determining if questions are related is\
          \ not documented, and subject to change at any time. Futhermore, these values\
          \ are very heavily cached, and may not update immediately after a question\
          \ has been editted. It is also not guaranteed that a question will be considered\
          \ related to any number (even non-zero) of questions, and a consumer should\
          \ be able to handle a variable number of returned questions.\n \n{ids} can\
          \ contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for question_id on question objects.\n \nThe sorts accepted by this\
          \ method operate on the follow fields of the question object:\n - activity\
          \ - last_activity_date\n - creation - creation_date\n - votes - score\n\
          \ - rank - a priority sort by site applies, subject to change at any time\
          \ Does not accept min or max\n  activity is the default sort.\n \n It is\
          \ possible to create moderately complex queries using sort, min, max, fromdate,\
          \ and todate.\n \nThis method returns a list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
              sort = rank => none
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
              sort = rank => none
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
            - rank
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /timeline:
      get:
        description: "Returns a subset of the events that have happened to the questions\
          \ identified in id.\n \nThis provides data similar to that found on a question's\
          \ timeline page.\n \nVoting data is scrubbed to deter inferencing of voter\
          \ identity.\n \n{ids} can contain up to 100 semicolon delimited ids, to\
          \ find ids programatically look for question_id on question objects.\n \n\
          This method returns a list of question timeline events.\n"
        queryParameters:
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: question_timeline_events
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Returns the questions identified in {ids}.\n \nThis is most useful\
        \ for fetching fresh data when maintaining a cache of question ids, or polling\
        \ for changes.\n \n{ids} can contain up to 100 semicolon delimited ids, to\
        \ find ids programatically look for question_id on question objects.\n \n\
        The sorts accepted by this method operate on the follow fields of the question\
        \ object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \ \nThis method returns a list of questions.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Gets all the questions on the site.\n \nThis method allows you make\
      \ fairly flexible queries across the entire corpus of questions on a site. For\
      \ example, getting all questions asked in the the week of Jan 1st 2011 with\
      \ scores of 10 or more is a single query with parameters sort=votes&min=10&fromdate=1293840000&todate=1294444800.\n\
      \ \nTo constrain questions returned to those with a set of tags, use the tagged\
      \ parameter with a semi-colon delimited list of tags. This is an and contraint,\
      \ passing tagged=c;java will return only those questions with both tags. As\
      \ such, passing more than 5 tags will always return zero results.\n \nThe sorts\
      \ accepted by this method operate on the follow fields of the question object:\n\
      \ - activity - last_activity_date\n - creation - creation_date\n - votes - score\n\
      \ - hot - by the formula ordering the hot tab Does not accept min or max\n -\
      \ week - by the formula ordering the week tab Does not accept min or max\n -\
      \ month - by the formula ordering the month tab Does not accept min or max\n\
      \  activity is the default sort.\n \n It is possible to create moderately complex\
      \ queries using sort, min, max, fromdate, and todate.\n \nThis method returns\
      \ a list of questions.\n"
    queryParameters:
      tagged?:
        type: string
        description: String list (semicolon delimited).
        displayName: tagged
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = hot => none
          sort = week => none
          sort = month => none
          sort = relevance => none
        displayName: max
      min?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = hot => none
          sort = week => none
          sort = month => none
          sort = relevance => none
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - activity
        - creation
        - votes
        - hot
        - week
        - month
        - relevance
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: questions
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/revisions:
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Guid list (semicolon delimited).
        displayName: ids
    get:
      description: "Returns edit revisions identified by ids in {ids}.\n \n{ids} can\
        \ contain up to 20 semicolon delimited ids, to find ids programatically look\
        \ for revision_guid on revision objects. Note that unlike most other id types\
        \ in the API, revision_guid is a string.\n \nThis method returns a list of\
        \ revisions.\n"
      queryParameters:
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: revisions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/search:
  /advanced:
    get:
      description: "Searches a site for any questions which fit the given criteria.\n\
        \ \nSearch criteria are expressed using the following parameters:\n  - q -\
        \ a free form text parameter, will match all question properties based on\
        \ an undocumented algorithm.\n - accepted - true to return only questions\
        \ with accepted answers, false to return only those without. Omit to elide\
        \ constraint.\n - answers - the minimum number of answers returned questions\
        \ must have.\n - body - text which must appear in returned questions' bodies.\n\
        \ - closed - true to return only closed questions, false to return only open\
        \ ones. Omit to elide constraint.\n - migrated - true to return only questions\
        \ migrated away from a site, false to return only those not. Omit to elide\
        \ constraint.\n - notice - true to return only questions with post notices,\
        \ false to return only those without. Omit to elide constraint.\n - nottagged\
        \ - a semicolon delimited list of tags, none of which will be present on returned\
        \ questions.\n - tagged - a semicolon delimited list of tags, of which at\
        \ least one will be present on all returned questions.\n - title - text which\
        \ must appear in returned questions' titles.\n - user - the id of the user\
        \ who must own the questions returned.\n - url - a url which must be contained\
        \ in a post, may include a wildcard.\n - views - the minimum number of views\
        \ returned questions must have.\n - wiki - true to return only community wiki\
        \ questions, false to return only non-community wiki ones. Omit to elide constraint.\n\
        \  \nAt least one additional parameter must be set if nottagged is set, for\
        \ performance reasons.\n \nThe sorts accepted by this method operate on the\
        \ follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n - relevance - matches the\
        \ relevance tab on the site itself Does not accept min or max\n  activity\
        \ is the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n \nThis method returns a list\
        \ of questions.\n"
      queryParameters:
        tagged?:
          type: string
          description: String list (semicolon delimited).
          displayName: tagged
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
            sort = relevance => none
          displayName: max
        min?:
          type: string
          description: |
            sort = activity => date
            sort = creation => date
            sort = votes => number
            sort = relevance => none
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - activity
          - creation
          - votes
          - relevance
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
        accepted?:
          type: string
          displayName: accepted
          enum: []
        answers?:
          type: integer
          displayName: answers
        body?:
          type: string
          displayName: body
        closed?:
          type: string
          displayName: closed
          enum: []
        migrated?:
          type: string
          displayName: migrated
          enum: []
        notice?:
          type: string
          displayName: notice
          enum: []
        nottagged?:
          type: string
          description: String list (semicolon delimited).
          displayName: nottagged
        q?:
          type: string
          displayName: q
        title?:
          type: string
          displayName: title
        url?:
          type: string
          displayName: url
        user?:
          type: integer
          displayName: user
        views?:
          type: integer
          displayName: views
        wiki?:
          type: string
          displayName: wiki
          enum: []
      responses:
        200:
          description: OK
          body:
            application/json:
              type: questions
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Searches a site for any questions which fit the given criteria.\n\
      \ \nThis method is intentionally quite limited. For more general searching,\
      \ you should use a proper internet search engine restricted to the domain of\
      \ the site in question.\n \nAt least one of tagged or intitle must be set on\
      \ this method. nottagged is only used if tagged is also set, for performance\
      \ reasons.\n \ntagged and nottagged are semi-colon delimited list of tags. At\
      \ least 1 tag in tagged will be on each returned question if it is passed, making\
      \ it the OR equivalent of the AND version of tagged on /questions.\n \nThe sorts\
      \ accepted by this method operate on the follow fields of the question object:\n\
      \ - activity - last_activity_date\n - creation - creation_date\n - votes - score\n\
      \ - relevance - matches the relevance tab on the site itself Does not accept\
      \ min or max\n  activity is the default sort.\n \n It is possible to create\
      \ moderately complex queries using sort, min, max, fromdate, and todate.\n \n\
      This method returns a list of questions.\n"
    queryParameters:
      tagged?:
        type: string
        description: String list (semicolon delimited).
        displayName: tagged
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        displayName: max
      min?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - activity
        - creation
        - votes
        - relevance
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
      intitle?:
        type: string
        displayName: intitle
      nottagged?:
        type: string
        description: String list (semicolon delimited).
        displayName: nottagged
    responses:
      200:
        description: OK
        body:
          application/json:
            type: questions
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/similar:
  get:
    description: "Returns questions which are similar to a hypothetical one based\
      \ on a title and tag combination.\n \nThis method is roughly equivalent to a\
      \ site's related questions suggestion on the ask page.\n \nThis method is useful\
      \ for correlating data outside of a Stack Exchange site with similar content\
      \ within one.\n \nNote that title must always be passed as a parameter. tagged\
      \ and nottagged are optional, semi-colon delimited lists of tags.\n \nIf tagged\
      \ is passed it is treated as a preference, there is no guarantee that questions\
      \ returned will have any of those tags. nottagged is treated as a requirement,\
      \ no questions will be returned with those tags.\n \nThe sorts accepted by this\
      \ method operate on the follow fields of the question object:\n - activity -\
      \ last_activity_date\n - creation - creation_date\n - votes - score\n - relevance\
      \ - order by \"how similar\" the questions are, most likely candidate first\
      \ with a descending order Does not accept min or max\n  activity is the default\
      \ sort.\n \n It is possible to create moderately complex queries using sort,\
      \ min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n"
    queryParameters:
      tagged?:
        type: string
        description: String list (semicolon delimited).
        displayName: tagged
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        displayName: max
      min?:
        type: string
        description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - activity
        - creation
        - votes
        - relevance
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
      nottagged?:
        type: string
        description: String list (semicolon delimited).
        displayName: nottagged
      title?:
        type: string
        displayName: title
    responses:
      200:
        description: OK
        body:
          application/json:
            type: questions
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/sites:
  get:
    description: "Returns all sites in the network.\n \nThis method allows for discovery\
      \ of new sites, and changes to existing ones. Be aware that unlike normal API\
      \ methods, this method should be fetched very infrequently, it is very unusual\
      \ for these values to change more than once on any given day. It is suggested\
      \ that you cache its return for at least one day, unless your app encounters\
      \ evidence that it has changed (such as from the /info method).\n \nThe pagesize\
      \ parameter for this method is unbounded, in acknowledgement that for many applications\
      \ repeatedly fetching from /sites would complicate start-up tasks needlessly.\n\
      \ \nThis method returns a list of sites.\n"
    queryParameters:
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
    responses:
      200:
        description: OK
        body:
          application/json:
            type: sites
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/suggested-edits:
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    get:
      description: "Returns suggested edits identified in ids.\n \n{ids} can contain\
        \ up to 100 semicolon delimited ids, to find ids programatically look for\
        \ suggested_edit_id on suggested_edit objects.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the suggested_edit object:\n - creation\
        \ - creation_date\n - approval - approval_date Does not return unapproved\
        \ suggested_edits\n - rejection - rejection_date Does not return unrejected\
        \ suggested_edits\n  creation is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \ \nThis method returns a list of suggested-edits.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = creation => date
            sort = approval => date
            sort = rejection => date
          displayName: max
        min?:
          type: string
          description: |
            sort = creation => date
            sort = approval => date
            sort = rejection => date
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - creation
          - approval
          - rejection
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: suggested-edits
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns all the suggested edits in the systems.\n \nThis method\
      \ returns a list of suggested-edits.\n \nThe sorts accepted by this method operate\
      \ on the follow fields of the suggested_edit object:\n - creation - creation_date\n\
      \ - approval - approval_date Does not return unapproved suggested_edits\n -\
      \ rejection - rejection_date Does not return unrejected suggested_edits\n  creation\
      \ is the default sort.\n \n It is possible to create moderately complex queries\
      \ using sort, min, max, fromdate, and todate.\n"
    queryParameters:
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        displayName: max
      min?:
        type: string
        description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - creation
        - approval
        - rejection
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: suggested-edits
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/tags:
  /moderator-only:
    get:
      description: "Returns the tags found on a site that only moderators can use.\n\
        \ \nThe inname parameter lets a consumer filter down to tags that contain\
        \ a certain substring. For example, inname=own would return both \"download\"\
        \ and \"owner\" amongst others.\n \nThis method returns a list of tags.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ tag object:\n - popular - count\n - activity - the creation_date of the\
        \ last question asked with the tag\n - name - name\n  popular is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n"
      queryParameters:
        inname?:
          type: string
          displayName: inname
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = popular => number
            sort = activity => date
            sort = name => string
          displayName: max
        min?:
          type: string
          description: |
            sort = popular => number
            sort = activity => date
            sort = name => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - popular
          - activity
          - name
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: tags
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /required:
    get:
      description: "Returns the tags found on a site that fulfill required tag constraints\
        \ on questions.\n \nThe inname parameter lets a consumer filter down to tags\
        \ that contain a certain substring. For example, inname=own would return both\
        \ \"download\" and \"owner\" amongst others.\n \nThis method returns a list\
        \ of tags.\n \nThe sorts accepted by this method operate on the follow fields\
        \ of the tag object:\n - popular - count\n - activity - the creation_date\
        \ of the last question asked with the tag\n - name - name\n  popular is the\
        \ default sort.\n \n It is possible to create moderately complex queries using\
        \ sort, min, max, fromdate, and todate.\n"
      queryParameters:
        inname?:
          type: string
          displayName: inname
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = popular => number
            sort = activity => date
            sort = name => string
          displayName: max
        min?:
          type: string
          description: |
            sort = popular => number
            sort = activity => date
            sort = name => string
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - popular
          - activity
          - name
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: tags
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /synonyms:
    get:
      description: "Returns all tag synonyms found a site.\n \nWhen searching for\
        \ synonyms of specific tags, it is better to use /tags/{tags}/synonyms over\
        \ this method.\n \nThe sorts accepted by this method operate on the follow\
        \ fields of the tag_synonym object:\n - creation - creation_date\n - applied\
        \ - applied_count\n - activity - last_applied_date\n  creation is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n \nThis method returns a list of tag_synonyms.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = creation => date
            sort = applied => number
            sort = activity => date
          displayName: max
        min?:
          type: string
          description: |
            sort = creation => date
            sort = applied => number
            sort = activity => date
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - creation
          - applied
          - activity
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: tag_synonyms
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{tags}:
    uriParameters:
      tags:
        type: string
        description: String list (semicolon delimited).
        displayName: tags
    /faq:
      get:
        description: "Returns the frequently asked questions for the given set of\
          \ tags in {tags}.\n \nFor a question to be returned, it must have all the\
          \ tags in {tags} and be considered \"frequently asked\". The exact algorithm\
          \ for determining whether a question is considered a FAQ is subject to change\
          \ at any time.\n \n{tags} can contain up to 5 individual tags per request.\n\
          \ \nThis method returns a list of questions.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /info:
      get:
        description: "Returns tag objects representing the tags in {tags} found on\
          \ the site.\n \nThis method diverges from the standard naming patterns to\
          \ avoid to conflicting with existing methods, due to the free form nature\
          \ of tag names.\n \nThis method returns a list of tags.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the tag object:\n - popular\
          \ - count\n - activity - the creation_date of the last question asked with\
          \ the tag\n - name - name\n  popular is the default sort.\n \n It is possible\
          \ to create moderately complex queries using sort, min, max, fromdate, and\
          \ todate.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = popular => number
              sort = activity => date
              sort = name => string
            displayName: max
          min?:
            type: string
            description: |
              sort = popular => number
              sort = activity => date
              sort = name => string
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - popular
            - activity
            - name
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: tags
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /related:
      get:
        description: "Returns the tags that are most related to those in {tags}.\n\
          \ \nIncluding multiple tags in {tags} is equivalent to asking for \"tags\
          \ related to tag #1 and tag #2\" not \"tags related to tag #1 or tag #2\"\
          .\n \ncount on tag objects returned is the number of question with that\
          \ tag that also share all those in {tags}.\n \n{tags} can contain up to\
          \ 4 individual tags per request.\n \nThis method returns a list of tags.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: tags
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /synonyms:
      get:
        description: "Gets all the synonyms that point to the tags identified in {tags}.\
          \ If you're looking to discover all the tag synonyms on a site, use the\
          \ /tags/synonyms methods instead of call this method on all tags.\n \n{tags}\
          \ can contain up to 20 individual tags per request.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the tag_synonym object:\n\
          \ - creation - creation_date\n - applied - applied_count\n - activity -\
          \ last_applied_date\n  creation is the default sort.\n \n It is possible\
          \ to create moderately complex queries using sort, min, max, fromdate, and\
          \ todate.\n \nThis method returns a list of tag synonyms.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = applied => number
              sort = activity => date
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = applied => number
              sort = activity => date
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - applied
            - activity
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: tag_synonyms
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /wikis:
      get:
        description: "Returns the wikis that go with the given set of tags in {tags}.\n\
          \ \nBe aware that not all tags have wikis.\n \n{tags} can contain up to\
          \ 20 individual tags per request.\n \nThis method returns a list of tag\
          \ wikis.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: tag_wikis
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{tag}:
    uriParameters:
      tag:
        type: string
        displayName: tag
    /top-answerers:
      /{period}:
        uriParameters:
          period:
            type: string
            displayName: period
            enum:
            - all_time
            - month
        get:
          description: "Returns the top 30 answerers active in a single tag, of either\
            \ all-time or the last 30 days.\n \nThis is a view onto the data presented\
            \ on the tag info page on the sites.\n \nThis method returns a list of\
            \ tag score objects.\n"
          queryParameters:
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: tag_score_objects
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /top-askers:
      /{period}:
        uriParameters:
          period:
            type: string
            displayName: period
            enum:
            - all_time
            - month
        get:
          description: "Returns the top 30 askers active in a single tag, of either\
            \ all-time or the last 30 days.\n \nThis is a view onto the data presented\
            \ on the tag info page on the sites.\n \nThis method returns a list of\
            \ tag score objects.\n"
          queryParameters:
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: tag_score_objects
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns the tags found on a site.\n \nThe inname parameter lets\
      \ a consumer filter down to tags that contain a certain substring. For example,\
      \ inname=own would return both \"download\" and \"owner\" amongst others.\n\
      \ \nThis method returns a list of tags.\n \nThe sorts accepted by this method\
      \ operate on the follow fields of the tag object:\n - popular - count\n - activity\
      \ - the creation_date of the last question asked with the tag\n - name - name\n\
      \  popular is the default sort.\n \n It is possible to create moderately complex\
      \ queries using sort, min, max, fromdate, and todate.\n"
    queryParameters:
      inname?:
        type: string
        displayName: inname
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        displayName: max
      min?:
        type: string
        description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - popular
        - activity
        - name
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: tags
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
/users:
  /moderators:
    /elected:
      get:
        description: "Returns those users on a site who both have moderator powers,\
          \ and were actually elected.\n \nThis method excludes Stack Exchange Inc.\
          \ employees, unless they were actually elected moderators on a site (which\
          \ can only have happened prior to their employment).\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the user object:\n - reputation\
          \ - reputation\n - creation - creation_date\n - name - display_name\n -\
          \ modified - last_modified_date\n  reputation is the default sort.\n \n\
          \ It is possible to create moderately complex queries using sort, min, max,\
          \ fromdate, and todate.\n \nThis method returns a list of users.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = reputation => number
              sort = creation => date
              sort = name => string
              sort = modified => date
            displayName: max
          min?:
            type: string
            description: |
              sort = reputation => number
              sort = creation => date
              sort = name => string
              sort = modified => date
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - reputation
            - creation
            - name
            - modified
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: users
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Gets those users on a site who can exercise moderation powers.\n\
        \ \nNote, employees of Stack Exchange Inc. will be returned if they have been\
        \ granted moderation powers on a site even if they have never been appointed\
        \ or elected explicitly. This method checks abilities, not the manner in which\
        \ they were obtained.\n \nThe sorts accepted by this method operate on the\
        \ follow fields of the user object:\n - reputation - reputation\n - creation\
        \ - creation_date\n - name - display_name\n - modified - last_modified_date\n\
        \  reputation is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n \nThis method\
        \ returns a list of users.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = reputation => number
            sort = creation => date
            sort = name => string
            sort = modified => date
          displayName: max
        min?:
          type: string
          description: |
            sort = reputation => number
            sort = creation => date
            sort = name => string
            sort = modified => date
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - reputation
          - creation
          - name
          - modified
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: users
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{ids}:
    uriParameters:
      ids:
        type: string
        description: Number list (semicolon delimited).
        displayName: ids
    /answers:
      get:
        description: "Returns the answers the users in {ids} have posted.\n \n{ids}\
          \ can contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the answer object:\n -\
          \ activity - last_activity_date\n - creation - creation_date\n - votes -\
          \ score\n  activity is the default sort.\n \n It is possible to create moderately\
          \ complex queries using sort, min, max, fromdate, and todate.\n \nThis method\
          \ returns a list of answers.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: answers
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /associated:
      get:
        description: "Returns all of a user's associated accounts, given their account_ids\
          \ in {ids}.\n \n{ids} can contain up to 100 semicolon delimited ids, to\
          \ find ids programatically look for account_id on user objects.\n \nThis\
          \ method returns a list of network_users.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
        responses:
          200:
            description: OK
            body:
              application/json:
                type: network_users
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /badges:
      get:
        description: "Get the badges the users in {ids} have earned.\n \nBadge sorts\
          \ are a tad complicated. For the purposes of sorting (and min/max) tag_based\
          \ is considered to be greater than named.\n \nThis means that you can get\
          \ a list of all tag based badges a user has by passing min=tag_based, and\
          \ conversely all the named badges by passing max=named, with sort=type.\n\
          \ \nFor ranks, bronze is greater than silver which is greater than gold.\
          \ Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver\
          \ for just silver, and min=bronze for just bronze.\n \nrank is the default\
          \ sort.\n \n{ids} can contain up to 100 semicolon delimited ids, to find\
          \ ids programatically look for user_id on user or shallow_user objects.\n\
          \ \nThis method returns a list of badges.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = rank => string
              sort = name => string
              sort = type => string
              sort = awarded => date
            displayName: max
          min?:
            type: string
            description: |
              sort = rank => string
              sort = name => string
              sort = type => string
              sort = awarded => date
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - rank
            - name
            - type
            - awarded
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: badges
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /comments:
      /{toid}:
        uriParameters:
          toid:
            type: integer
            displayName: toid
        get:
          description: "Get the comments that the users in {ids} have posted in reply\
            \ to the single user identified in {toid}.\n \nThis method is useful for\
            \ extracting conversations, especially over time or across multiple posts.\n\
            \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
            \ look for user_id on user or shallow_user objects. {toid} can contain\
            \ only 1 id, found in the same manner as those in {ids}.\n \nThe sorts\
            \ accepted by this method operate on the follow fields of the comment\
            \ object:\n - creation - creation_date\n - votes - score\n  creation is\
            \ the default sort.\n \n It is possible to create moderately complex queries\
            \ using sort, min, max, fromdate, and todate.\n \nThis method returns\
            \ a list of comments.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = creation => date
                sort = votes => number
              displayName: max
            min?:
              type: string
              description: |
                sort = creation => date
                sort = votes => number
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - creation
              - votes
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: comments
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      get:
        description: "Get the comments posted by users in {ids}.\n \n{ids} can contain\
          \ up to 100 semicolon delimited ids, to find ids programatically look for\
          \ user_id on user or shallow_user objects.\n \nThe sorts accepted by this\
          \ method operate on the follow fields of the comment object:\n - creation\
          \ - creation_date\n - votes - score\n  creation is the default sort.\n \n\
          \ It is possible to create moderately complex queries using sort, min, max,\
          \ fromdate, and todate.\n \nThis method returns a list of comments.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: comments
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /favorites:
      get:
        description: "Get the questions that users in {ids} have favorited.\n \nThis\
          \ method is effectively a view onto a user's favorites tab.\n \n{ids} can\
          \ contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the question object:\n\
          \ - activity - last_activity_date\n - creation - creation_date\n - votes\
          \ - score\n - added - when the user favorited the question\n  activity is\
          \ the default sort.\n \n It is possible to create moderately complex queries\
          \ using sort, min, max, fromdate, and todate.\n \nThis method returns a\
          \ list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
              sort = added => date
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
              sort = added => date
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
            - added
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /mentioned:
      get:
        description: "Gets all the comments that the users in {ids} were mentioned\
          \ in.\n \nNote, to count as a mention the comment must be considered to\
          \ be \"in reply to\" a user. Most importantly, this means that a comment\
          \ can only be in reply to a single user.\n \n{ids} can contain up to 100\
          \ semicolon delimited ids, to find ids programatically look for user_id\
          \ on user or shallow_user objects.\n \nThe sorts accepted by this method\
          \ operate on the follow fields of the comment object:\n - creation - creation_date\n\
          \ - votes - score\n  It is possible to create moderately complex queries\
          \ using sort, min, max, fromdate, and todate.\n \nThis method returns a\
          \ list of comments.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: comments
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /merges:
      get:
        description: "Returns a record of merges that have occurred involving the\
          \ passed account ids.\n \nThis method allows you to take now invalid account\
          \ ids and find what account they've become, or take currently valid account\
          \ ids and find which ids were equivalent in the past.\n \nThis is most useful\
          \ when confirming that an account_id is in fact \"new\" to an application.\n\
          \ \nAccount merges can happen for a wide range of reasons, applications\
          \ should not make assumptions that merges have particular causes.\n \nNote\
          \ that accounts are managed at a network level, users on a site may be merged\
          \ due to an account level merge but there is no guarantee that a merge has\
          \ an effect on any particular site.\n \nThis method returns a list of account_merge.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
        responses:
          200:
            description: OK
            body:
              application/json:
                type: account_merge
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /questions:
      /featured:
        get:
          description: "Gets the questions on which the users in {ids} have active\
            \ bounties.\n \n{ids} can contain up to 100 semicolon delimited ids, to\
            \ find ids programatically look for user_id on user or shallow_user objects.\n\
            \ \nThe sorts accepted by this method operate on the follow fields of\
            \ the question object:\n - activity - last_activity_date\n - creation\
            \ - creation_date\n - votes - score\n  activity is the default sort.\n\
            \ \n It is possible to create moderately complex queries using sort, min,\
            \ max, fromdate, and todate.\n \nThis method returns a list of questions.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: max
            min?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - activity
              - creation
              - votes
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: questions
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      /no-answers:
        get:
          description: "Gets the questions asked by the users in {ids} which have\
            \ no answers.\n \nQuestions returns by this method actually have zero\
            \ undeleted answers. It is completely disjoint /users/{ids}/questions/unanswered\
            \ and /users/{ids}/questions/unaccepted, which only return questions with\
            \ at least one answer, subject to other contraints.\n \n{ids} can contain\
            \ up to 100 semicolon delimited ids, to find ids programatically look\
            \ for user_id on user or shallow_user objects.\n \nThe sorts accepted\
            \ by this method operate on the follow fields of the question object:\n\
            \ - activity - last_activity_date\n - creation - creation_date\n - votes\
            \ - score\n  activity is the default sort.\n \n It is possible to create\
            \ moderately complex queries using sort, min, max, fromdate, and todate.\n\
            \ \nThis method returns a list of questions.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: max
            min?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - activity
              - creation
              - votes
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: questions
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      /unaccepted:
        get:
          description: "Gets the questions asked by the users in {ids} which have\
            \ at least one answer, but no accepted answer.\n \nQuestions returned\
            \ by this method have answers, but the owner has not opted to accept any\
            \ of them.\n \n{ids} can contain up to 100 semicolon delimited ids, to\
            \ find ids programatically look for user_id on user or shallow_user objects.\n\
            \ \nThe sorts accepted by this method operate on the follow fields of\
            \ the question object:\n - activity - last_activity_date\n - creation\
            \ - creation_date\n - votes - score\n  activity is the default sort.\n\
            \ \n It is possible to create moderately complex queries using sort, min,\
            \ max, fromdate, and todate.\n \nThis method returns a list of questions.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: max
            min?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - activity
              - creation
              - votes
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: questions
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      /unanswered:
        get:
          description: "Gets the questions asked by the users in {ids} which the site\
            \ consideres unanswered, while still having at least one answer posted.\n\
            \ \nThese rules are subject to change, but currently any question without\
            \ at least one upvoted or accepted answer is considered unanswered.\n\
            \ \nTo get the set of questions that a user probably considers unanswered,\
            \ the returned questions should be unioned with those returned by /users/{id}/questions/no-answers.\
            \ These methods are distinct so that truly unanswered (that is, zero posted\
            \ answers) questions can be easily separated from mearly poorly or inadequately\
            \ answered ones.\n \n{ids} can contain up to 100 semicolon delimited ids,\
            \ to find ids programatically look for user_id on user or shallow_user\
            \ objects.\n \nThe sorts accepted by this method operate on the follow\
            \ fields of the question object:\n - activity - last_activity_date\n -\
            \ creation - creation_date\n - votes - score\n  activity is the default\
            \ sort.\n \n It is possible to create moderately complex queries using\
            \ sort, min, max, fromdate, and todate.\n \nThis method returns a list\
            \ of questions.\n"
          queryParameters:
            order?:
              type: string
              displayName: order
              enum:
              - desc
              - asc
            max?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: max
            min?:
              type: string
              description: |
                sort = activity => date
                sort = creation => date
                sort = votes => number
              displayName: min
            sort?:
              type: string
              displayName: sort
              enum:
              - activity
              - creation
              - votes
            fromdate?:
              type: integer
              description: Unix date.
              displayName: fromdate
            todate?:
              type: integer
              description: Unix date.
              displayName: todate
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: questions
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      get:
        description: "Gets the questions asked by the users in {ids}.\n \n{ids} can\
          \ contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the question object:\n\
          \ - activity - last_activity_date\n - creation - creation_date\n - votes\
          \ - score\n  activity is the default sort.\n \n It is possible to create\
          \ moderately complex queries using sort, min, max, fromdate, and todate.\n\
          \ \nThis method returns a list of questions.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: max
          min?:
            type: string
            description: |
              sort = activity => date
              sort = creation => date
              sort = votes => number
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - activity
            - creation
            - votes
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: questions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /reputation:
      get:
        description: "Gets a subset of the reputation changes for users in {ids}.\n\
          \ \nReputation changes are intentionally scrubbed of some data to make it\
          \ difficult to correlate votes on particular posts with user reputation\
          \ changes. That being said, this method returns enough data for reasonable\
          \ display of reputation trends.\n \n{ids} can contain up to 100 semicolon\
          \ delimited ids, to find ids programatically look for user_id on user or\
          \ shallow_user objects.\n \nThis method returns a list of reputation objects.\n"
        queryParameters:
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: reputation_changes
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /reputation-history:
      get:
        description: "Returns users' public reputation history.\n \nThis method returns\
          \ a list of reputation_history.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: reputation_history
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /suggested-edits:
      get:
        description: "Returns the suggested edits a users in {ids} have submitted.\n\
          \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the suggested_edit object:\n\
          \ - creation - creation_date\n - approval - approval_date Does not return\
          \ unapproved suggested_edits\n - rejection - rejection_date Does not return\
          \ unrejected suggested_edits\n  creation is the default sort.\n \n It is\
          \ possible to create moderately complex queries using sort, min, max, fromdate,\
          \ and todate.\n \nThis method returns a list of suggested-edits.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = creation => date
              sort = approval => date
              sort = rejection => date
            displayName: max
          min?:
            type: string
            description: |
              sort = creation => date
              sort = approval => date
              sort = rejection => date
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - creation
            - approval
            - rejection
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: suggested-edits
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /tags:
      get:
        description: "Returns the tags the users identified in {ids} have been active\
          \ in.\n \nThis route corresponds roughly to user's stats tab, but does not\
          \ include tag scores. A subset of tag scores are available (on a single\
          \ user basis) in /users/{id}/top-answer-tags and /users/{id}/top-question-tags.\n\
          \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
          \ by this method operate on the follow fields of the tag object:\n - popular\
          \ - count\n - activity - the creation_date of the last question asked with\
          \ the tag\n - name - name\n  popular is the default sort.\n \n It is possible\
          \ to create moderately complex queries using sort, min, max, fromdate, and\
          \ todate.\n \nThis method returns a list of tags.\n"
        queryParameters:
          order?:
            type: string
            displayName: order
            enum:
            - desc
            - asc
          max?:
            type: string
            description: |
              sort = popular => number
              sort = activity => date
              sort = name => string
            displayName: max
          min?:
            type: string
            description: |
              sort = popular => number
              sort = activity => date
              sort = name => string
            displayName: min
          sort?:
            type: string
            displayName: sort
            enum:
            - popular
            - activity
            - name
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: tags
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /timeline:
      get:
        description: "Returns a subset of the actions the users in {ids} have taken\
          \ on the site.\n \nThis method returns users' posts, edits, and earned badges\
          \ in the order they were accomplished. It is possible to filter to just\
          \ a window of activity using the fromdate and todate parameters.\n \n{ids}\
          \ can contain up to 100 semicolon delimited ids, to find ids programatically\
          \ look for user_id on user or shallow_user objects.\n \nThis method returns\
          \ a list of user timeline objects.\n"
        queryParameters:
          fromdate?:
            type: integer
            description: Unix date.
            displayName: fromdate
          todate?:
            type: integer
            description: Unix date.
            displayName: todate
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: user_timeline_objects
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    get:
      description: "Gets the users identified in ids in {ids}.\n \nTypically this\
        \ method will be called to fetch user profiles when you have obtained user\
        \ ids from some other source, such as /questions.\n \n{ids} can contain up\
        \ to 100 semicolon delimited ids, to find ids programatically look for user_id\
        \ on user or shallow_user objects.\n \nThe sorts accepted by this method operate\
        \ on the follow fields of the user object:\n - reputation - reputation\n -\
        \ creation - creation_date\n - name - display_name\n - modified - last_modified_date\n\
        \  reputation is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n \nThis method\
        \ returns a list of users.\n"
      queryParameters:
        order?:
          type: string
          displayName: order
          enum:
          - desc
          - asc
        max?:
          type: string
          description: |
            sort = reputation => number
            sort = creation => date
            sort = name => string
            sort = modified => date
          displayName: max
        min?:
          type: string
          description: |
            sort = reputation => number
            sort = creation => date
            sort = name => string
            sort = modified => date
          displayName: min
        sort?:
          type: string
          displayName: sort
          enum:
          - reputation
          - creation
          - name
          - modified
        fromdate?:
          type: integer
          description: Unix date.
          displayName: fromdate
        todate?:
          type: integer
          description: Unix date.
          displayName: todate
        pagesize?:
          type: integer
          displayName: pagesize
        page?:
          type: integer
          displayName: page
        filter?:
          type: string
          description: |
            #Discussion

            The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

            An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

            Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

            The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

            #Safety

            Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

            Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

            When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

            #Built In Filters

            The following filters are built in:

            default, each type documents which fields are returned under the default filter (for example, answers).
            withbody, which is default plus the *.body fields
            none, which is empty
            total, which includes just .total

            #Compatibility with V1.x

            For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
          displayName: filter
        callback?:
          type: string
          description: |
            All API responses are JSON, we do support JSONP with the callback query parameter.
          displayName: callback
        site:
          type: string
          description: |
            Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
          displayName: site
      responses:
        200:
          description: OK
          body:
            application/json:
              type: users
        400:
          description: !!binary |-
            YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
        401:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
        402:
          description: !!binary |-
            aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
        403:
          description: !!binary |-
            YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
        404:
          description: !!binary |-
            bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
        405:
          description: !!binary |-
            a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
        406:
          description: !!binary |-
            YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
        500:
          description: !!binary |-
            aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
        502:
          description: !!binary |-
            dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
        503:
          description: !!binary |-
            dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  /{id}:
    uriParameters:
      id:
        type: integer
        displayName: id
    /inbox:
      /unread:
        get:
          description: "Returns the unread items in a user's inbox.\n \nThis method\
            \ requires an access_token, with a scope containing \"read_inbox\".\n\
            \ \nThis method is effectively an alias for /inbox/unread. It is provided\
            \ for consumers who make strong assumptions about operating within the\
            \ context of a single site rather than the Stack Exchange network as a\
            \ whole.\n \n{id} can contain a single id, to find it programatically\
            \ look for user_id on user or shallow_user objects.\n \nThis method returns\
            \ a list of inbox items.\n"
          queryParameters:
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
            since?:
              type: integer
              description: Unix date.
              displayName: since
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: inbox_items
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      get:
        description: "Returns a user's inbox.\n \nThis method requires an access_token,\
          \ with a scope containing \"read_inbox\".\n \nThis method is effectively\
          \ an alias for /inbox. It is provided for consumers who make strong assumptions\
          \ about operating within the context of a single site rather than the Stack\
          \ Exchange network as a whole.\n \n{id} can contain a single id, to find\
          \ it programatically look for user_id on user or shallow_user objects.\n\
          \ \nThis method returns a list of inbox items.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: inbox_items
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /notifications:
      /unread:
        get:
          description: "Returns a user's unread notifications.\n \nThis method requires\
            \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
            \ returns a list of notifications.\n"
          queryParameters:
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: notifications
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
      get:
        description: "Returns a user's notifications.\n \nThis method requires an\
          \ access_token, with a scope containing \"read_inbox\".\n \nThis method\
          \ returns a list of notifications.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: notifications
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /privileges:
      get:
        description: "Returns the privileges a user has.\n \nApplications are encouraged\
          \ to calculate privileges themselves, without repeated queries to this method.\
          \ A simple check against the results returned by /privileges and user.user_type\
          \ would be sufficient.\n \n{id} can contain only a single, to find it programatically\
          \ look for user_id on user or shallow_user objects.\n \nThis method returns\
          \ a list of privileges.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: privileges
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /reputation-history:
      /full:
        get:
          description: "Returns a user's full reputation history, including private\
            \ events.\n \nThis method requires an access_token, with a scope containing\
            \ \"private_info\".\n \nThis method returns a list of reputation_history.\n"
          queryParameters:
            pagesize?:
              type: integer
              displayName: pagesize
            page?:
              type: integer
              displayName: page
            filter?:
              type: string
              description: |
                #Discussion

                The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                #Safety

                Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                #Built In Filters

                The following filters are built in:

                default, each type documents which fields are returned under the default filter (for example, answers).
                withbody, which is default plus the *.body fields
                none, which is empty
                total, which includes just .total

                #Compatibility with V1.x

                For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
              displayName: filter
            callback?:
              type: string
              description: |
                All API responses are JSON, we do support JSONP with the callback query parameter.
              displayName: callback
            site:
              type: string
              description: |
                Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
              displayName: site
          responses:
            200:
              description: OK
              body:
                application/json:
                  type: reputation_history
            400:
              description: !!binary |-
                YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
            401:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
            402:
              description: !!binary |-
                aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
            403:
              description: !!binary |-
                YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
            404:
              description: !!binary |-
                bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
            405:
              description: !!binary |-
                a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
            406:
              description: !!binary |-
                YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
            500:
              description: !!binary |-
                aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
            502:
              description: !!binary |-
                dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
            503:
              description: !!binary |-
                dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /tags:
      /{tags}:
        uriParameters:
          tags:
            type: string
            description: String list (semicolon delimited).
            displayName: tags
        /top-answers:
          get:
            description: "Returns the top 30 answers a user has posted in response\
              \ to questions with the given tags.\n \n{id} can contain a single id,\
              \ to find it programatically look for user_id on user or shallow_user\
              \ objects. {tags} is limited to 5 tags, passing more will result in\
              \ an error.\n \nThe sorts accepted by this method operate on the follow\
              \ fields of the answer object:\n - activity - last_activity_date\n -\
              \ creation - creation_date\n - votes - score\n  activity is the default\
              \ sort.\n \n It is possible to create moderately complex queries using\
              \ sort, min, max, fromdate, and todate.\n \nThis method returns a list\
              \ of answers.\n"
            queryParameters:
              order?:
                type: string
                displayName: order
                enum:
                - desc
                - asc
              max?:
                type: string
                description: |
                  sort = activity => date
                  sort = creation => date
                  sort = votes => number
                displayName: max
              min?:
                type: string
                description: |
                  sort = activity => date
                  sort = creation => date
                  sort = votes => number
                displayName: min
              sort?:
                type: string
                displayName: sort
                enum:
                - activity
                - creation
                - votes
              fromdate?:
                type: integer
                description: Unix date.
                displayName: fromdate
              todate?:
                type: integer
                description: Unix date.
                displayName: todate
              pagesize?:
                type: integer
                displayName: pagesize
              page?:
                type: integer
                displayName: page
              filter?:
                type: string
                description: |
                  #Discussion

                  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                  Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                  #Safety

                  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                  Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                  #Built In Filters

                  The following filters are built in:

                  default, each type documents which fields are returned under the default filter (for example, answers).
                  withbody, which is default plus the *.body fields
                  none, which is empty
                  total, which includes just .total

                  #Compatibility with V1.x

                  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
                displayName: filter
              callback?:
                type: string
                description: |
                  All API responses are JSON, we do support JSONP with the callback query parameter.
                displayName: callback
              site:
                type: string
                description: |
                  Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
                displayName: site
            responses:
              200:
                description: OK
                body:
                  application/json:
                    type: answers
              400:
                description: !!binary |-
                  YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
              401:
                description: !!binary |-
                  YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
              402:
                description: !!binary |-
                  aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
              403:
                description: !!binary |-
                  YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
              404:
                description: !!binary |-
                  bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
              405:
                description: !!binary |-
                  a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
              406:
                description: !!binary |-
                  YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
              500:
                description: !!binary |-
                  aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
              502:
                description: !!binary |-
                  dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
              503:
                description: !!binary |-
                  dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
        /top-questions:
          get:
            description: "Returns the top 30 questions a user has asked with the given\
              \ tags.\n \n{id} can contain a single id, to find it programatically\
              \ look for user_id on user or shallow_user objects. {tags} is limited\
              \ to 5 tags, passing more will result in an error.\n \nThe sorts accepted\
              \ by this method operate on the follow fields of the question object:\n\
              \ - activity - last_activity_date\n - creation - creation_date\n - votes\
              \ - score\n  activity is the default sort.\n \n It is possible to create\
              \ moderately complex queries using sort, min, max, fromdate, and todate.\n\
              \ \nThis method returns a list of questions.\n"
            queryParameters:
              order?:
                type: string
                displayName: order
                enum:
                - desc
                - asc
              max?:
                type: string
                description: |
                  sort = activity => date
                  sort = creation => date
                  sort = votes => number
                displayName: max
              min?:
                type: string
                description: |
                  sort = activity => date
                  sort = creation => date
                  sort = votes => number
                displayName: min
              sort?:
                type: string
                displayName: sort
                enum:
                - activity
                - creation
                - votes
              fromdate?:
                type: integer
                description: Unix date.
                displayName: fromdate
              todate?:
                type: integer
                description: Unix date.
                displayName: todate
              pagesize?:
                type: integer
                displayName: pagesize
              page?:
                type: integer
                displayName: page
              filter?:
                type: string
                description: |
                  #Discussion

                  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

                  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

                  Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

                  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

                  #Safety

                  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

                  Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

                  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

                  #Built In Filters

                  The following filters are built in:

                  default, each type documents which fields are returned under the default filter (for example, answers).
                  withbody, which is default plus the *.body fields
                  none, which is empty
                  total, which includes just .total

                  #Compatibility with V1.x

                  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
                displayName: filter
              callback?:
                type: string
                description: |
                  All API responses are JSON, we do support JSONP with the callback query parameter.
                displayName: callback
              site:
                type: string
                description: |
                  Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
                displayName: site
            responses:
              200:
                description: OK
                body:
                  application/json:
                    type: questions
              400:
                description: !!binary |-
                  YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
              401:
                description: !!binary |-
                  YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
              402:
                description: !!binary |-
                  aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
              403:
                description: !!binary |-
                  YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
              404:
                description: !!binary |-
                  bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
              405:
                description: !!binary |-
                  a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
              406:
                description: !!binary |-
                  YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
              500:
                description: !!binary |-
                  aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
              502:
                description: !!binary |-
                  dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
              503:
                description: !!binary |-
                  dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /top-answer-tags:
      get:
        description: "Returns a single user's top tags by answer score.\n \nThis a\
          \ subset of the data returned on a user's tags tab.\n \n{id} can contain\
          \ a single id, to find it programatically look for user_id on user or shallow_user\
          \ objects.\n \nThis method returns a list of top_tag objects.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: top_tag_objects
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /top-question-tags:
      get:
        description: "Returns a single user's top tags by question score.\n \nThis\
          \ a subset of the data returned on a user's tags tab.\n \n{id} can contain\
          \ a single id, to find it programatically look for user_id on user or shallow_user\
          \ objects.\n \nThis method returns a list of top_tag objects.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: top_tag_objects
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
    /write-permissions:
      get:
        description: "Returns the write permissions a user has via the api.\n \nThe\
          \ Stack Exchange API gives users the ability to create, edit, and delete\
          \ certain types. This method returns whether the passed user is capable\
          \ of performing those actions at all, as well as how many times a day they\
          \ can.\n \nThis method does not consider the user's current quota (ie. if\
          \ they've already exhausted it for today) nor any additional restrictions\
          \ on write access, such as editing deleted comments.\n \nThis method returns\
          \ a list of write_permissions.\n"
        queryParameters:
          pagesize?:
            type: integer
            displayName: pagesize
          page?:
            type: integer
            displayName: page
          filter?:
            type: string
            description: |
              #Discussion

              The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

              An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

              Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

              The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

              #Safety

              Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

              Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

              When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

              #Built In Filters

              The following filters are built in:

              default, each type documents which fields are returned under the default filter (for example, answers).
              withbody, which is default plus the *.body fields
              none, which is empty
              total, which includes just .total

              #Compatibility with V1.x

              For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
            displayName: filter
          callback?:
            type: string
            description: |
              All API responses are JSON, we do support JSONP with the callback query parameter.
            displayName: callback
          site:
            type: string
            description: |
              Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
            displayName: site
        responses:
          200:
            description: OK
            body:
              application/json:
                type: write_permissions
          400:
            description: !!binary |-
              YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
          401:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
          402:
            description: !!binary |-
              aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
          403:
            description: !!binary |-
              YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
          404:
            description: !!binary |-
              bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
          405:
            description: !!binary |-
              a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
          406:
            description: !!binary |-
              YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
          500:
            description: !!binary |-
              aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
          502:
            description: !!binary |-
              dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
          503:
            description: !!binary |-
              dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
  get:
    description: "Returns all users on a site.\n \nThis method returns a list of users.\n\
      \ \nThe sorts accepted by this method operate on the follow fields of the user\
      \ object:\n - reputation - reputation\n - creation - creation_date\n - name\
      \ - display_name\n - modified - last_modified_date\n  reputation is the default\
      \ sort.\n \n It is possible to create moderately complex queries using sort,\
      \ min, max, fromdate, and todate.\n \nThe inname parameter lets consumers filter\
      \ the results down to just those users with a certain substring in their display\
      \ name. For example, inname=kevin will return all users with both users named\
      \ simply \"Kevin\" or those with Kevin as one of (or part of) their names; such\
      \ as \"Kevin Montrose\".\n"
    queryParameters:
      inname?:
        type: string
        displayName: inname
      order?:
        type: string
        displayName: order
        enum:
        - desc
        - asc
      max?:
        type: string
        description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        displayName: max
      min?:
        type: string
        description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        displayName: min
      sort?:
        type: string
        displayName: sort
        enum:
        - reputation
        - creation
        - name
        - modified
      fromdate?:
        type: integer
        description: Unix date.
        displayName: fromdate
      todate?:
        type: integer
        description: Unix date.
        displayName: todate
      pagesize?:
        type: integer
        displayName: pagesize
      page?:
        type: integer
        displayName: page
      filter?:
        type: string
        description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        displayName: filter
      callback?:
        type: string
        description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        displayName: callback
      site:
        type: string
        description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        displayName: site
    responses:
      200:
        description: OK
        body:
          application/json:
            type: users
      400:
        description: !!binary |-
          YmFkX3BhcmFtZXRlciDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAwIEFuIGludmFsaWQgcGFyYW1ldGVyIHdhcyBwYXNzZWQsIHRoaXMgaW5jbHVkZXMgZXZlbiAiaGlnaCBsZXZlbCIgcGFyYW1ldGVycyBsaWtlIGtleSBvciBzaXRlLgo=
      401:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDEgQSBtZXRob2QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgdG9rZW4gKG9idGFpbmVkIHZpYSBhdXRoZW50aWNhdGlvbikgd2FzIGNhbGxlZCB3aXRob3V0IG9uZS4K
      402:
        description: !!binary |-
          aW52YWxpZF9hY2Nlc3NfdG9rZW4gw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDQwMiBBbiBpbnZhbGlkIGFjY2VzcyB0b2tlbiB3YXMgcGFzc2VkIHRvIGEgbWV0aG9kLgo=
      403:
        description: !!binary |-
          YWNjZXNzX2RlbmllZCDDg8KDw4LCosODwqLDosKAwprDgsKsw4PCosOiwoLCrMOFwpMgNDAzIEEgbWV0aG9kIHdoaWNoIHJlcXVpcmVzIGNlcnRhaW4gcGVybWlzc2lvbnMgd2FzIGNhbGxlZCB3aXRoIGFuIGFjY2VzcyB0b2tlbiB0aGF0IGxhY2tzIHRob3NlIHBlcm1pc3Npb25zLgo=
      404:
        description: !!binary |-
          bm9fbWV0aG9kIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDQgQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgZG9lcyBub3QgZXhpc3QuIE5vdGUsIGNhbGxpbmcgbWV0aG9kcyB0aGF0IGV4cGVjdCBudW1lcmljIGlkcyAobGlrZSAvdXNlcnMve2lkc30pIHdpdGggbm9uLW51bWVyaWMgaWRzIGNhbiBhbHNvIHJlc3VsdCBpbiB0aGlzIGVycm9yLgo=
      405:
        description: !!binary |-
          a2V5X3JlcXVpcmVkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDUgQSBtZXRob2Qgd2FzIGNhbGxlZCBpbiBhIG1hbm5lciB0aGF0IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uIGtleSAoZ2VuZXJhbGx5LCB3aXRoIGFuIGFjY2VzcyB0b2tlbiksIGJ1dCBubyBrZXkgd2FzIHBhc3NlZC4K
      406:
        description: !!binary |-
          YWNjZXNzX3Rva2VuX2NvbXByb21pc2VkIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA0MDYgQW4gYWNjZXNzIHRva2VuIGlzIG5vIGxvbmdlciBiZWxpZXZlZCB0byBiZSBzZWN1cmUsIG5vcm1hbGx5IGJlY2F1c2UgaXQgd2FzIHVzZWQgb24gYSBub24tSFRUUFMgY2FsbC4gVGhlIGFjY2VzcyB0b2tlbiB3aWxsIGJlIGludmFsaWRhdGVkIGlmIHRoaXMgZXJyb3IgaXMgcmV0dXJuZWQuCg==
      500:
        description: !!binary |-
          aW50ZXJuYWxfZXJyb3Igw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMCBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBBUEkuIEl0IGhhcyBiZWVuIGxvZ2dlZCwgYW5kIFN0YWNrIEV4Y2hhbmdlIGRldmVsb3BlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLiBZb3Ugc2hvdWxkIHJlcG9ydCB0aGVzZSBlcnJvcnMgb24gU3RhY2sgQXBwcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZXkncmUgZml4ZWQuCg==
      502:
        description: !!binary |-
          dGhyb3R0bGVfdmlvbGF0aW9uIMODwoPDgsKiw4PCosOiwoDCmsOCwqzDg8Kiw6LCgsKsw4XCkyA1MDIgQW4gYXBwbGljYXRpb24gaGFzIHZpb2xhdGVkIHBhcnQgb2YgdGhlIHJhdGUgbGltaXRpbmcgY29udHJhY3QsIHNvIHRoZSByZXF1ZXN0IHdhcyB0ZXJtaW5hdGVkLgo=
      503:
        description: !!binary |-
          dGVtcG9yYXJpbHlfdW5hdmFpbGFibGUgw4PCg8OCwqLDg8Kiw6LCgMKaw4LCrMODwqLDosKCwqzDhcKTIDUwMyBTb21lIG9yIGFsbCBvZiB0aGUgQVBJIGlzIHVuYXZhaWxhYmxlLiBBcHBsaWNhdGlvbnMgc2hvdWxkIGJhY2tvZmYgb24gcmVxdWVzdHMgdG8gdGhlIG1ldGhvZCBpbnZva2VkLgo=
