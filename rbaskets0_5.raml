#%RAML 1.0
title: Request Baskets
version: '0.5'
baseUri: rbaskets.in/
description: RESTful API of Request Baskets service
mediaType:
- application/json
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
securitySchemes:
  basket_token:
    type: Pass Through
    describedBy:
      headers:
        Authorization: string
types:
  Baskets:
    type: object
    properties:
      count?:
        type: integer
        description: Total number of baskets in the system; not present if query is applied
      has_more:
        type: boolean
        description: Indicates if there are more baskets to fetch
      names:
        type: array
        description: Collection of basket names
        items:
          type: string
  Config:
    type: object
    properties:
      capacity?:
        type: integer
        description: Baskets capacity, defines maximum number of requests to store
      expand_path?:
        type: boolean
        description: If set to `true` the forward URL path will be expanded when original HTTP request contains compound path.
      forward_url?:
        type: string
        description: URL to forward all incoming requests of the basket, `empty` value disables forwarding
      insecure_tls?:
        type: boolean
        description: |
          If set to `true` the certificate verification will be disabled if forward URL indicates HTTPS scheme.
          **Warning:** enabling this feature has known security implications.
    description: New configuration to apply
  Headers:
    type: object
    properties:
      //:
        type: array
        description: Collection of header values
        items:
          type: string
    description: Map of HTTP headers, key represents name, value is array of values
  Request:
    type: object
    properties:
      body?:
        type: string
        description: Content of request body
      content_length?:
        type: integer
        description: Content lenght of request
      date?:
        type: integer
        description: Date and time of request in Unix time ms. format (number of miliseconds elapsed since January 1, 1970 UTC)
        format: int64
      headers?:
        type: Headers
      method?:
        type: string
        description: HTTP methof of request
      path?:
        type: string
        description: URL path of request
      query?:
        type: string
        description: Query parameters of request
  Requests:
    type: object
    properties:
      count?:
        type: integer
        description: Current number of collected requests hold by basket; not present if query is applied
      has_more:
        type: boolean
        description: Indicates if there are more requests collected by basket to fetch
      requests:
        type: array
        description: Collection of collected requests
        items:
          type: Request
      total_count?:
        type: integer
        description: Total number of all requests passed through this basket; not present if query is applied
  Response:
    type: object
    properties:
      body?:
        type: string
        description: Content of response body
      headers?:
        type: Headers
      is_template?:
        type: boolean
        description: |
          If set to `true` the body is treated as [HTML template](https://golang.org/pkg/html/template) that accepts
          input from request parameters.
      status?:
        type: integer
        description: The HTTP status code to reply with
    description: HTTP response configuration
  Token:
    type: object
    properties:
      token:
        type: string
        description: Secure token to manage the basket, generated by system
/baskets:
  /{name}:
    uriParameters:
      name:
        type: string
        description: The basket name
        displayName: name
    /requests:
      get:
        description: Fetches collection of requests collected by this basket.
        displayName: Get collected requests
        queryParameters:
          max?:
            type: integer
            description: Maximum number of requests to return; default 20
            displayName: max
          skip?:
            type: integer
            description: Number of requests to skip; default 0
            displayName: skip
          q?:
            type: string
            description: Query string to filter result, only requests that match the query will be included in response
            displayName: q
          in?:
            type: string
            description: |
              Defines what is taken into account when filtering is applied: `body` - search in content body of collected requests,
              `query` - search among query parameters of collected requests, `headers` - search among request header values,
              `any` - search anywhere; default `any`
            displayName: in
            enum:
            - any
            - body
            - query
            - headers
        responses:
          200:
            description: OK. Returns list of basket requests.
            body:
              application/json:
                type: Requests
          204:
            description: No Content. No requests found for specified limits
          401:
            description: Unauthorized. Invalid or missing basket token
          404:
            description: Not Found. No basket with such name
      delete:
        description: Deletes all requests collected by this basket.
        displayName: Delete all requests
        responses:
          204:
            description: No Content. Basket requests are cleared
          401:
            description: Unauthorized. Invalid or missing basket token
          404:
            description: Not Found. No basket with such name
    /responses:
      /{method}:
        uriParameters:
          method:
            type: string
            description: The HTTP method this response is configured for
            displayName: method
            enum:
            - GET
            - HEAD
            - POST
            - PUT
            - PATCH
            - DELETE
            - CONNECT
            - OPTIONS
            - TRACE
        get:
          description: |
            Retrieves information about configured response of the basket. Service will reply with this response to any
            HTTP request sent to the basket with appropriate HTTP method.

            If nothing is configured, the default response is HTTP 200 - OK with empty content.
          displayName: Get response settings
          responses:
            200:
              description: OK. Returns configured response information
              body:
                application/json:
                  type: Response
            401:
              description: Unauthorized. Invalid or missing basket token
            404:
              description: Not Found. No basket with such name
        put:
          description: |
            Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP
            request sent to the basket with appropriate HTTP method.

            If nothing is configured, the default response is HTTP 200 - OK with empty content.
          displayName: Update response settings
          body:
            application/json: Response
          responses:
            204:
              description: No Content. Response configuration is updated
            400:
              description: Bad Request. Failed to parse JSON into response configuration object.
            401:
              description: Unauthorized. Invalid or missing basket token
            404:
              description: Not Found. No basket with such name
            422:
              description: Unprocessable Entity. Response configuration is not valid.
    get:
      description: Retrieves configuration settings of this basket.
      displayName: Get basket settings
      responses:
        200:
          description: OK. Returns basket configuration
          body:
            application/json:
              type: Config
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
    delete:
      description: Permanently deletes this basket and all collected requests.
      displayName: Delete basket
      responses:
        204:
          description: No Content. Basket is deleted
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
    post:
      description: Creates a new basket with this name.
      displayName: Create new basket
      body:
        application/json: Config
      responses:
        201:
          description: Created. Indicates that basket is successfully created
          body:
            application/json:
              type: Token
        400:
          description: Bad Request. Failed to parse JSON into basket configuration object.
        403:
          description: Forbidden. Indicates that basket name conflicts with reserved paths; e.g. `baskets`, `web`, etc.
        409:
          description: Conflict. Indicates that basket with such name already exists
        422:
          description: Unprocessable Entity. Basket configuration is not valid.
    put:
      description: |
        Updates configuration settings of this basket.

        Special configuration parameters for request forwarding:
          * `insecure_tls` controls certificate verification when forwarding requests. Setting this parameter to `true`
          allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with
          self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.
          * `expand_path` changes the logic of constructing taget URL when forwarding requests. If this parameter is
          set to `true` the forward URL path will be expanded when original HTTP request contains compound path. For
          example, a basket with name **server1** is configured to forward all requests to `http://server1.intranet:8001/myservice`
          and it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`
          then depending on `expand_path` settings the request will be forwarded to:
            * `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`
            * `false` => `GET http://server1.intranet:8001/myservice?status=OK`
      displayName: Update basket settings
      body:
        application/json: Config
      responses:
        204:
          description: No Content. Basket configuration is updated
        400:
          description: Bad Request. Failed to parse JSON into basket configuration object.
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
        422:
          description: Unprocessable Entity. Basket configuration is not valid.
  get:
    description: Fetches a list of basket names managed by service.
    displayName: Get baskets
    queryParameters:
      max?:
        type: integer
        description: Maximum number of basket names to return; default 20
        displayName: max
      skip?:
        type: integer
        description: Number of basket names to skip; default 0
        displayName: skip
      q?:
        type: string
        description: Query string to filter result, only those basket names that match the query will be included in response
        displayName: q
    responses:
      200:
        description: OK. Returns list of available baskets.
        body:
          application/json:
            type: Baskets
      204:
        description: No Content. No baskets available for specified limits
